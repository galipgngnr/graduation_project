
graduation_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006838  08006838  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006840  08006840  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000254  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e22b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3c  00000000  00000000  0002e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  00030bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021222  00000000  00000000  000317c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f13d  00000000  00000000  000529e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb883  00000000  00000000  00061b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d3a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ad4  00000000  00000000  0012d3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006698 	.word	0x08006698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006698 	.word	0x08006698

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b974 	b.w	8000998 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468e      	mov	lr, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14d      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4694      	mov	ip, r2
 80006da:	d969      	bls.n	80007b0 <__udivmoddi4+0xe8>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b152      	cbz	r2, 80006f8 <__udivmoddi4+0x30>
 80006e2:	fa01 f302 	lsl.w	r3, r1, r2
 80006e6:	f1c2 0120 	rsb	r1, r2, #32
 80006ea:	fa20 f101 	lsr.w	r1, r0, r1
 80006ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f2:	ea41 0e03 	orr.w	lr, r1, r3
 80006f6:	4094      	lsls	r4, r2
 80006f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006fc:	0c21      	lsrs	r1, r4, #16
 80006fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000702:	fa1f f78c 	uxth.w	r7, ip
 8000706:	fb08 e316 	mls	r3, r8, r6, lr
 800070a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800070e:	fb06 f107 	mul.w	r1, r6, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f106 30ff 	add.w	r0, r6, #4294967295
 800071e:	f080 811f 	bcs.w	8000960 <__udivmoddi4+0x298>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 811c 	bls.w	8000960 <__udivmoddi4+0x298>
 8000728:	3e02      	subs	r6, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb3 f0f8 	udiv	r0, r3, r8
 8000734:	fb08 3310 	mls	r3, r8, r0, r3
 8000738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800073c:	fb00 f707 	mul.w	r7, r0, r7
 8000740:	42a7      	cmp	r7, r4
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x92>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 33ff 	add.w	r3, r0, #4294967295
 800074c:	f080 810a 	bcs.w	8000964 <__udivmoddi4+0x29c>
 8000750:	42a7      	cmp	r7, r4
 8000752:	f240 8107 	bls.w	8000964 <__udivmoddi4+0x29c>
 8000756:	4464      	add	r4, ip
 8000758:	3802      	subs	r0, #2
 800075a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800075e:	1be4      	subs	r4, r4, r7
 8000760:	2600      	movs	r6, #0
 8000762:	b11d      	cbz	r5, 800076c <__udivmoddi4+0xa4>
 8000764:	40d4      	lsrs	r4, r2
 8000766:	2300      	movs	r3, #0
 8000768:	e9c5 4300 	strd	r4, r3, [r5]
 800076c:	4631      	mov	r1, r6
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0xc2>
 8000776:	2d00      	cmp	r5, #0
 8000778:	f000 80ef 	beq.w	800095a <__udivmoddi4+0x292>
 800077c:	2600      	movs	r6, #0
 800077e:	e9c5 0100 	strd	r0, r1, [r5]
 8000782:	4630      	mov	r0, r6
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	fab3 f683 	clz	r6, r3
 800078e:	2e00      	cmp	r6, #0
 8000790:	d14a      	bne.n	8000828 <__udivmoddi4+0x160>
 8000792:	428b      	cmp	r3, r1
 8000794:	d302      	bcc.n	800079c <__udivmoddi4+0xd4>
 8000796:	4282      	cmp	r2, r0
 8000798:	f200 80f9 	bhi.w	800098e <__udivmoddi4+0x2c6>
 800079c:	1a84      	subs	r4, r0, r2
 800079e:	eb61 0303 	sbc.w	r3, r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	469e      	mov	lr, r3
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d0e0      	beq.n	800076c <__udivmoddi4+0xa4>
 80007aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ae:	e7dd      	b.n	800076c <__udivmoddi4+0xa4>
 80007b0:	b902      	cbnz	r2, 80007b4 <__udivmoddi4+0xec>
 80007b2:	deff      	udf	#255	; 0xff
 80007b4:	fab2 f282 	clz	r2, r2
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	f040 8092 	bne.w	80008e2 <__udivmoddi4+0x21a>
 80007be:	eba1 010c 	sub.w	r1, r1, ip
 80007c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	2601      	movs	r6, #1
 80007cc:	0c20      	lsrs	r0, r4, #16
 80007ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80007d2:	fb07 1113 	mls	r1, r7, r3, r1
 80007d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007da:	fb0e f003 	mul.w	r0, lr, r3
 80007de:	4288      	cmp	r0, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x12c>
 80007e2:	eb1c 0101 	adds.w	r1, ip, r1
 80007e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x12a>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	f200 80cb 	bhi.w	8000988 <__udivmoddi4+0x2c0>
 80007f2:	4643      	mov	r3, r8
 80007f4:	1a09      	subs	r1, r1, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000800:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000804:	fb0e fe00 	mul.w	lr, lr, r0
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x156>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f100 31ff 	add.w	r1, r0, #4294967295
 8000814:	d202      	bcs.n	800081c <__udivmoddi4+0x154>
 8000816:	45a6      	cmp	lr, r4
 8000818:	f200 80bb 	bhi.w	8000992 <__udivmoddi4+0x2ca>
 800081c:	4608      	mov	r0, r1
 800081e:	eba4 040e 	sub.w	r4, r4, lr
 8000822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000826:	e79c      	b.n	8000762 <__udivmoddi4+0x9a>
 8000828:	f1c6 0720 	rsb	r7, r6, #32
 800082c:	40b3      	lsls	r3, r6
 800082e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000832:	ea4c 0c03 	orr.w	ip, ip, r3
 8000836:	fa20 f407 	lsr.w	r4, r0, r7
 800083a:	fa01 f306 	lsl.w	r3, r1, r6
 800083e:	431c      	orrs	r4, r3
 8000840:	40f9      	lsrs	r1, r7
 8000842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000846:	fa00 f306 	lsl.w	r3, r0, r6
 800084a:	fbb1 f8f9 	udiv	r8, r1, r9
 800084e:	0c20      	lsrs	r0, r4, #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fb09 1118 	mls	r1, r9, r8, r1
 8000858:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085c:	fb08 f00e 	mul.w	r0, r8, lr
 8000860:	4288      	cmp	r0, r1
 8000862:	fa02 f206 	lsl.w	r2, r2, r6
 8000866:	d90b      	bls.n	8000880 <__udivmoddi4+0x1b8>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000870:	f080 8088 	bcs.w	8000984 <__udivmoddi4+0x2bc>
 8000874:	4288      	cmp	r0, r1
 8000876:	f240 8085 	bls.w	8000984 <__udivmoddi4+0x2bc>
 800087a:	f1a8 0802 	sub.w	r8, r8, #2
 800087e:	4461      	add	r1, ip
 8000880:	1a09      	subs	r1, r1, r0
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb1 f0f9 	udiv	r0, r1, r9
 8000888:	fb09 1110 	mls	r1, r9, r0, r1
 800088c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000890:	fb00 fe0e 	mul.w	lr, r0, lr
 8000894:	458e      	cmp	lr, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x1e2>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a0:	d26c      	bcs.n	800097c <__udivmoddi4+0x2b4>
 80008a2:	458e      	cmp	lr, r1
 80008a4:	d96a      	bls.n	800097c <__udivmoddi4+0x2b4>
 80008a6:	3802      	subs	r0, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ae:	fba0 9402 	umull	r9, r4, r0, r2
 80008b2:	eba1 010e 	sub.w	r1, r1, lr
 80008b6:	42a1      	cmp	r1, r4
 80008b8:	46c8      	mov	r8, r9
 80008ba:	46a6      	mov	lr, r4
 80008bc:	d356      	bcc.n	800096c <__udivmoddi4+0x2a4>
 80008be:	d053      	beq.n	8000968 <__udivmoddi4+0x2a0>
 80008c0:	b15d      	cbz	r5, 80008da <__udivmoddi4+0x212>
 80008c2:	ebb3 0208 	subs.w	r2, r3, r8
 80008c6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ca:	fa01 f707 	lsl.w	r7, r1, r7
 80008ce:	fa22 f306 	lsr.w	r3, r2, r6
 80008d2:	40f1      	lsrs	r1, r6
 80008d4:	431f      	orrs	r7, r3
 80008d6:	e9c5 7100 	strd	r7, r1, [r5]
 80008da:	2600      	movs	r6, #0
 80008dc:	4631      	mov	r1, r6
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	fa21 f303 	lsr.w	r3, r1, r3
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4301      	orrs	r1, r0
 80008f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f8:	fa1f fe8c 	uxth.w	lr, ip
 80008fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000900:	fb07 3610 	mls	r6, r7, r0, r3
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800090a:	fb00 f60e 	mul.w	r6, r0, lr
 800090e:	429e      	cmp	r6, r3
 8000910:	fa04 f402 	lsl.w	r4, r4, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x260>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 38ff 	add.w	r8, r0, #4294967295
 800091e:	d22f      	bcs.n	8000980 <__udivmoddi4+0x2b8>
 8000920:	429e      	cmp	r6, r3
 8000922:	d92d      	bls.n	8000980 <__udivmoddi4+0x2b8>
 8000924:	3802      	subs	r0, #2
 8000926:	4463      	add	r3, ip
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	b289      	uxth	r1, r1
 800092c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000930:	fb07 3316 	mls	r3, r7, r6, r3
 8000934:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000938:	fb06 f30e 	mul.w	r3, r6, lr
 800093c:	428b      	cmp	r3, r1
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x28a>
 8000940:	eb1c 0101 	adds.w	r1, ip, r1
 8000944:	f106 38ff 	add.w	r8, r6, #4294967295
 8000948:	d216      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 800094a:	428b      	cmp	r3, r1
 800094c:	d914      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800094e:	3e02      	subs	r6, #2
 8000950:	4461      	add	r1, ip
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000958:	e738      	b.n	80007cc <__udivmoddi4+0x104>
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e705      	b.n	800076c <__udivmoddi4+0xa4>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e3      	b.n	800072c <__udivmoddi4+0x64>
 8000964:	4618      	mov	r0, r3
 8000966:	e6f8      	b.n	800075a <__udivmoddi4+0x92>
 8000968:	454b      	cmp	r3, r9
 800096a:	d2a9      	bcs.n	80008c0 <__udivmoddi4+0x1f8>
 800096c:	ebb9 0802 	subs.w	r8, r9, r2
 8000970:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000974:	3801      	subs	r0, #1
 8000976:	e7a3      	b.n	80008c0 <__udivmoddi4+0x1f8>
 8000978:	4646      	mov	r6, r8
 800097a:	e7ea      	b.n	8000952 <__udivmoddi4+0x28a>
 800097c:	4620      	mov	r0, r4
 800097e:	e794      	b.n	80008aa <__udivmoddi4+0x1e2>
 8000980:	4640      	mov	r0, r8
 8000982:	e7d1      	b.n	8000928 <__udivmoddi4+0x260>
 8000984:	46d0      	mov	r8, sl
 8000986:	e77b      	b.n	8000880 <__udivmoddi4+0x1b8>
 8000988:	3b02      	subs	r3, #2
 800098a:	4461      	add	r1, ip
 800098c:	e732      	b.n	80007f4 <__udivmoddi4+0x12c>
 800098e:	4630      	mov	r0, r6
 8000990:	e709      	b.n	80007a6 <__udivmoddi4+0xde>
 8000992:	4464      	add	r4, ip
 8000994:	3802      	subs	r0, #2
 8000996:	e742      	b.n	800081e <__udivmoddi4+0x156>

08000998 <__aeabi_idiv0>:
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <delay_us+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80009ae:	bf00      	nop
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <delay_us+0x38>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3f9      	bcc.n	80009b0 <delay_us+0x14>
	timer_value=__HAL_TIM_GET_COUNTER(&htim1);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <delay_us+0x38>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <delay_us+0x3c>)
 80009c6:	801a      	strh	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	20000090 	.word	0x20000090
 80009d8:	200001a8 	.word	0x200001a8

080009dc <fullStepRotate_x>:
//MOTOR X KONTROL SWITCH CASE
void fullStepRotate_x(int step){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]


			switch(step){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <fullStepRotate_x+0x16>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d006      	beq.n	80009fe <fullStepRotate_x+0x22>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

			break;
		}

	}
 80009f0:	e00b      	b.n	8000a0a <fullStepRotate_x+0x2e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2102      	movs	r1, #2
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <fullStepRotate_x+0x38>)
 80009f8:	f002 fd62 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 80009fc:	e005      	b.n	8000a0a <fullStepRotate_x+0x2e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2102      	movs	r1, #2
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <fullStepRotate_x+0x38>)
 8000a04:	f002 fd5c 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 8000a08:	bf00      	nop
	}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40020000 	.word	0x40020000

08000a18 <move_function>:
void move_function(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
	for(int i=0;i<5;i++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a22:	e1a8      	b.n	8000d76 <move_function+0x35e>
//base motor function
	for(int seq=0; seq<=1500; seq++){
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a28:	e020      	b.n	8000a6c <move_function+0x54>
		if(HAL_GPIO_ReadPin(e_limit_GPIO_Port, e_limit_Pin)){
 8000a2a:	2180      	movs	r1, #128	; 0x80
 8000a2c:	48b8      	ldr	r0, [pc, #736]	; (8000d10 <move_function+0x2f8>)
 8000a2e:	f002 fd2f 	bl	8003490 <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11f      	bne.n	8000a78 <move_function+0x60>
			break;
		}
		  HAL_GPIO_WritePin(GPIOC,dir_e_Pin,GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	48b5      	ldr	r0, [pc, #724]	; (8000d14 <move_function+0x2fc>)
 8000a3e:	f002 fd3f 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	48b3      	ldr	r0, [pc, #716]	; (8000d14 <move_function+0x2fc>)
 8000a48:	f002 fd3a 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000a4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a50:	f7ff ffa4 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	48ae      	ldr	r0, [pc, #696]	; (8000d14 <move_function+0x2fc>)
 8000a5a:	f002 fd31 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000a5e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a62:	f7ff ff9b 	bl	800099c <delay_us>
	for(int seq=0; seq<=1500; seq++){
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	3301      	adds	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a72:	4293      	cmp	r3, r2
 8000a74:	ddd9      	ble.n	8000a2a <move_function+0x12>
 8000a76:	e000      	b.n	8000a7a <move_function+0x62>
			break;
 8000a78:	bf00      	nop
	}
	// motor d function

	for(int i=0;i<2000;i++){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7e:	e020      	b.n	8000ac2 <move_function+0xaa>
		if(HAL_GPIO_ReadPin(d_limit_GPIO_Port, d_limit_Pin)){
 8000a80:	2102      	movs	r1, #2
 8000a82:	48a5      	ldr	r0, [pc, #660]	; (8000d18 <move_function+0x300>)
 8000a84:	f002 fd04 	bl	8003490 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d11e      	bne.n	8000acc <move_function+0xb4>
			break;
		}

		HAL_GPIO_WritePin(dir_d_GPIO_Port,dir_d_Pin,GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	48a2      	ldr	r0, [pc, #648]	; (8000d1c <move_function+0x304>)
 8000a94:	f002 fd14 	bl	80034c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(step_d_GPIO_Port,step_d_Pin ,GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	489f      	ldr	r0, [pc, #636]	; (8000d1c <move_function+0x304>)
 8000a9e:	f002 fd0f 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f7ff ff79 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_d_GPIO_Port,step_d_Pin ,GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2110      	movs	r1, #16
 8000aae:	489b      	ldr	r0, [pc, #620]	; (8000d1c <move_function+0x304>)
 8000ab0:	f002 fd06 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f7ff ff70 	bl	800099c <delay_us>
	for(int i=0;i<2000;i++){
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	3301      	adds	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ac8:	dbda      	blt.n	8000a80 <move_function+0x68>
 8000aca:	e000      	b.n	8000ace <move_function+0xb6>
			break;
 8000acc:	bf00      	nop
	}
	// motor x function
	for(int i=0;i<3400;i++){
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
 8000ad2:	e020      	b.n	8000b16 <move_function+0xfe>
		if(HAL_GPIO_ReadPin(x_limit_GPIO_Port, x_limit_Pin)){
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4890      	ldr	r0, [pc, #576]	; (8000d18 <move_function+0x300>)
 8000ad8:	f002 fcda 	bl	8003490 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d11f      	bne.n	8000b22 <move_function+0x10a>
			break;
		}
		HAL_GPIO_WritePin(dir_x_GPIO_Port,dir_x_Pin,GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	488d      	ldr	r0, [pc, #564]	; (8000d1c <move_function+0x304>)
 8000ae8:	f002 fcea 	bl	80034c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2102      	movs	r1, #2
 8000af0:	488a      	ldr	r0, [pc, #552]	; (8000d1c <move_function+0x304>)
 8000af2:	f002 fce5 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afa:	f7ff ff4f 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	4886      	ldr	r0, [pc, #536]	; (8000d1c <move_function+0x304>)
 8000b04:	f002 fcdc 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0c:	f7ff ff46 	bl	800099c <delay_us>
	for(int i=0;i<3400;i++){
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	3301      	adds	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	f640 5247 	movw	r2, #3399	; 0xd47
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	ddd9      	ble.n	8000ad4 <move_function+0xbc>
 8000b20:	e000      	b.n	8000b24 <move_function+0x10c>
			break;
 8000b22:	bf00      	nop

	// motor x function


	// motor x function
	for(int i=0;i<1500;i++){
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	e020      	b.n	8000b6c <move_function+0x154>
		if(HAL_GPIO_ReadPin(e_limit_GPIO_Port, e_limit_Pin)){
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	4878      	ldr	r0, [pc, #480]	; (8000d10 <move_function+0x2f8>)
 8000b2e:	f002 fcaf 	bl	8003490 <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11f      	bne.n	8000b78 <move_function+0x160>
			break;
		}
		  HAL_GPIO_WritePin(GPIOC,dir_e_Pin,GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	4875      	ldr	r0, [pc, #468]	; (8000d14 <move_function+0x2fc>)
 8000b3e:	f002 fcbf 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2110      	movs	r1, #16
 8000b46:	4873      	ldr	r0, [pc, #460]	; (8000d14 <move_function+0x2fc>)
 8000b48:	f002 fcba 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000b4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b50:	f7ff ff24 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	486e      	ldr	r0, [pc, #440]	; (8000d14 <move_function+0x2fc>)
 8000b5a:	f002 fcb1 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000b5e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b62:	f7ff ff1b 	bl	800099c <delay_us>
	for(int i=0;i<1500;i++){
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b72:	4293      	cmp	r3, r2
 8000b74:	ddd9      	ble.n	8000b2a <move_function+0x112>
 8000b76:	e000      	b.n	8000b7a <move_function+0x162>
			break;
 8000b78:	bf00      	nop
	}
		for(int i=0;i<3400;i++){
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	e020      	b.n	8000bc2 <move_function+0x1aa>
		if(HAL_GPIO_ReadPin(x_limit_GPIO_Port, x_limit_Pin)){
 8000b80:	2101      	movs	r1, #1
 8000b82:	4865      	ldr	r0, [pc, #404]	; (8000d18 <move_function+0x300>)
 8000b84:	f002 fc84 	bl	8003490 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d11f      	bne.n	8000bce <move_function+0x1b6>
			break;
		}
		HAL_GPIO_WritePin(dir_x_GPIO_Port,dir_x_Pin,GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2104      	movs	r1, #4
 8000b92:	4862      	ldr	r0, [pc, #392]	; (8000d1c <move_function+0x304>)
 8000b94:	f002 fc94 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	485f      	ldr	r0, [pc, #380]	; (8000d1c <move_function+0x304>)
 8000b9e:	f002 fc8f 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba6:	f7ff fef9 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	485b      	ldr	r0, [pc, #364]	; (8000d1c <move_function+0x304>)
 8000bb0:	f002 fc86 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb8:	f7ff fef0 	bl	800099c <delay_us>
		for(int i=0;i<3400;i++){
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	f640 5247 	movw	r2, #3399	; 0xd47
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	ddd9      	ble.n	8000b80 <move_function+0x168>
 8000bcc:	e000      	b.n	8000bd0 <move_function+0x1b8>
			break;
 8000bce:	bf00      	nop
	}
	//GERİ DÖNÜŞ
	for(int seq=0; seq<=1500; seq++){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e020      	b.n	8000c18 <move_function+0x200>
		if(HAL_GPIO_ReadPin(e_limit_GPIO_Port, e_limit_Pin)){
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	484d      	ldr	r0, [pc, #308]	; (8000d10 <move_function+0x2f8>)
 8000bda:	f002 fc59 	bl	8003490 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11f      	bne.n	8000c24 <move_function+0x20c>
			break;
		}
		  HAL_GPIO_WritePin(GPIOC,dir_e_Pin,GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2120      	movs	r1, #32
 8000be8:	484a      	ldr	r0, [pc, #296]	; (8000d14 <move_function+0x2fc>)
 8000bea:	f002 fc69 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	4848      	ldr	r0, [pc, #288]	; (8000d14 <move_function+0x2fc>)
 8000bf4:	f002 fc64 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000bf8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bfc:	f7ff fece 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2110      	movs	r1, #16
 8000c04:	4843      	ldr	r0, [pc, #268]	; (8000d14 <move_function+0x2fc>)
 8000c06:	f002 fc5b 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000c0a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c0e:	f7ff fec5 	bl	800099c <delay_us>
	for(int seq=0; seq<=1500; seq++){
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	ddd9      	ble.n	8000bd6 <move_function+0x1be>
 8000c22:	e000      	b.n	8000c26 <move_function+0x20e>
			break;
 8000c24:	bf00      	nop
	}
	// motor d function

	for(int i=0;i<2000;i++){
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	e020      	b.n	8000c6e <move_function+0x256>
		if(HAL_GPIO_ReadPin(d_limit_GPIO_Port, d_limit_Pin)){
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	483a      	ldr	r0, [pc, #232]	; (8000d18 <move_function+0x300>)
 8000c30:	f002 fc2e 	bl	8003490 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d11e      	bne.n	8000c78 <move_function+0x260>
			break;
		}
		HAL_GPIO_WritePin(dir_d_GPIO_Port,dir_d_Pin,GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4837      	ldr	r0, [pc, #220]	; (8000d1c <move_function+0x304>)
 8000c40:	f002 fc3e 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_d_GPIO_Port,step_d_Pin ,GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2110      	movs	r1, #16
 8000c48:	4834      	ldr	r0, [pc, #208]	; (8000d1c <move_function+0x304>)
 8000c4a:	f002 fc39 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c52:	f7ff fea3 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_d_GPIO_Port,step_d_Pin ,GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4830      	ldr	r0, [pc, #192]	; (8000d1c <move_function+0x304>)
 8000c5c:	f002 fc30 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f7ff fe9a 	bl	800099c <delay_us>
	for(int i=0;i<2000;i++){
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c74:	dbda      	blt.n	8000c2c <move_function+0x214>
 8000c76:	e000      	b.n	8000c7a <move_function+0x262>
			break;
 8000c78:	bf00      	nop
	}
	// motor x function
	for(int i=0;i<3400;i++){
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e020      	b.n	8000cc2 <move_function+0x2aa>
		if(HAL_GPIO_ReadPin(x_limit_GPIO_Port, x_limit_Pin)){
 8000c80:	2101      	movs	r1, #1
 8000c82:	4825      	ldr	r0, [pc, #148]	; (8000d18 <move_function+0x300>)
 8000c84:	f002 fc04 	bl	8003490 <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d11f      	bne.n	8000cce <move_function+0x2b6>
			break;
		}
		HAL_GPIO_WritePin(dir_x_GPIO_Port,dir_x_Pin,GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2104      	movs	r1, #4
 8000c92:	4822      	ldr	r0, [pc, #136]	; (8000d1c <move_function+0x304>)
 8000c94:	f002 fc14 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <move_function+0x304>)
 8000c9e:	f002 fc0f 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f7ff fe79 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2102      	movs	r1, #2
 8000cae:	481b      	ldr	r0, [pc, #108]	; (8000d1c <move_function+0x304>)
 8000cb0:	f002 fc06 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb8:	f7ff fe70 	bl	800099c <delay_us>
	for(int i=0;i<3400;i++){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f640 5247 	movw	r2, #3399	; 0xd47
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	ddd9      	ble.n	8000c80 <move_function+0x268>
 8000ccc:	e000      	b.n	8000cd0 <move_function+0x2b8>
			break;
 8000cce:	bf00      	nop

	// motor x function


	// motor e function
	for(int i=0;i<1500;i++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	e014      	b.n	8000d00 <move_function+0x2e8>
		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <move_function+0x2fc>)
 8000cdc:	f002 fbf0 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000ce0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ce4:	f7ff fe5a 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin ,GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2110      	movs	r1, #16
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <move_function+0x2fc>)
 8000cee:	f002 fbe7 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000cf2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cf6:	f7ff fe51 	bl	800099c <delay_us>
	for(int i=0;i<1500;i++){
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d06:	4293      	cmp	r3, r2
 8000d08:	dde5      	ble.n	8000cd6 <move_function+0x2be>
	}
	for(int i=0;i<3000;i++){
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	e028      	b.n	8000d62 <move_function+0x34a>
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020000 	.word	0x40020000
		if(HAL_GPIO_ReadPin(x_limit_GPIO_Port, x_limit_Pin)){
 8000d20:	2101      	movs	r1, #1
 8000d22:	4819      	ldr	r0, [pc, #100]	; (8000d88 <move_function+0x370>)
 8000d24:	f002 fbb4 	bl	8003490 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d11f      	bne.n	8000d6e <move_function+0x356>
			break;
		}
		HAL_GPIO_WritePin(dir_d_GPIO_Port,dir_d_Pin,GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <move_function+0x374>)
 8000d34:	f002 fbc4 	bl	80034c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <move_function+0x374>)
 8000d3e:	f002 fbbf 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d46:	f7ff fe29 	bl	800099c <delay_us>
		HAL_GPIO_WritePin(step_x_GPIO_Port,step_x_Pin ,GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	480f      	ldr	r0, [pc, #60]	; (8000d8c <move_function+0x374>)
 8000d50:	f002 fbb6 	bl	80034c0 <HAL_GPIO_WritePin>
		delay_us(1000);
 8000d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d58:	f7ff fe20 	bl	800099c <delay_us>
	for(int i=0;i<3000;i++){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	ddd9      	ble.n	8000d20 <move_function+0x308>
 8000d6c:	e000      	b.n	8000d70 <move_function+0x358>
			break;
 8000d6e:	bf00      	nop
	for(int i=0;i<5;i++){
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	3301      	adds	r3, #1
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	f77f ae53 	ble.w	8000a24 <move_function+0xc>
	}


	}
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020000 	.word	0x40020000

08000d90 <setStepper_x>:
void setStepper_x(int angle,int direction,int speed){
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b08b      	sub	sp, #44	; 0x2c
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
	float perAngle=1.8;//  360/200=1.8(per step angle)
 8000d9c:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <setStepper_x+0x2b0>)
 8000d9e:	613b      	str	r3, [r7, #16]
	stepNumber_x=(int)(angle/perAngle);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000daa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db6:	ee17 2a90 	vmov	r2, s15
 8000dba:	4ba2      	ldr	r3, [pc, #648]	; (8001044 <setStepper_x+0x2b4>)
 8000dbc:	601a      	str	r2, [r3, #0]

	for(int seq=0; seq<=stepNumber_x; seq++){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	e110      	b.n	8000fe6 <setStepper_x+0x256>

		if(current_angel_x>8000){
 8000dc4:	4ba0      	ldr	r3, [pc, #640]	; (8001048 <setStepper_x+0x2b8>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800104c <setStepper_x+0x2bc>
 8000dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	dd3e      	ble.n	8000e56 <setStepper_x+0xc6>
			if(direction==1){// saat yonunun tersi
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	f040 810a 	bne.w	8000ff4 <setStepper_x+0x264>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2104      	movs	r1, #4
 8000de4:	489a      	ldr	r0, [pc, #616]	; (8001050 <setStepper_x+0x2c0>)
 8000de6:	f002 fb6b 	bl	80034c0 <HAL_GPIO_WritePin>
				for(int step=4; step>=0; step--){
 8000dea:	2304      	movs	r3, #4
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	e01b      	b.n	8000e28 <setStepper_x+0x98>
					if(HAL_GPIO_ReadPin(x_limit_GPIO_Port,x_limit_Pin)){
 8000df0:	2101      	movs	r1, #1
 8000df2:	4898      	ldr	r0, [pc, #608]	; (8001054 <setStepper_x+0x2c4>)
 8000df4:	f002 fb4c 	bl	8003490 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <setStepper_x+0x78>
								current_angel_x=0;
 8000dfe:	4b92      	ldr	r3, [pc, #584]	; (8001048 <setStepper_x+0x2b8>)
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
								break;
 8000e06:	e012      	b.n	8000e2e <setStepper_x+0x9e>
							}


					fullStepRotate_x(step);
 8000e08:	6a38      	ldr	r0, [r7, #32]
 8000e0a:	f7ff fde7 	bl	80009dc <fullStepRotate_x>
					x_direction_flag_backward=1;
 8000e0e:	4b92      	ldr	r3, [pc, #584]	; (8001058 <setStepper_x+0x2c8>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
					x_direction_flag_forward=0;
 8000e14:	4b91      	ldr	r3, [pc, #580]	; (800105c <setStepper_x+0x2cc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
					delay_us(1000);
 8000e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1e:	f7ff fdbd 	bl	800099c <delay_us>
				for(int step=4; step>=0; step--){
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dae0      	bge.n	8000df0 <setStepper_x+0x60>
				}
				current_angel_x-=1.8;
 8000e2e:	4b86      	ldr	r3, [pc, #536]	; (8001048 <setStepper_x+0x2b8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb88 	bl	8000548 <__aeabi_f2d>
 8000e38:	a37f      	add	r3, pc, #508	; (adr r3, 8001038 <setStepper_x+0x2a8>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fa23 	bl	8000288 <__aeabi_dsub>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fbd5 	bl	80005f8 <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a7d      	ldr	r2, [pc, #500]	; (8001048 <setStepper_x+0x2b8>)
 8000e52:	6013      	str	r3, [r2, #0]


		}
			break;
 8000e54:	e0ce      	b.n	8000ff4 <setStepper_x+0x264>
		}

		if(current_angel_x<8000){
 8000e56:	4b7c      	ldr	r3, [pc, #496]	; (8001048 <setStepper_x+0x2b8>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800104c <setStepper_x+0x2bc>
 8000e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	d57b      	bpl.n	8000f62 <setStepper_x+0x1d2>



			if(direction==0){
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d134      	bne.n	8000eda <setStepper_x+0x14a>
				HAL_GPIO_WritePin(GPIOA, dir_x_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2104      	movs	r1, #4
 8000e74:	4876      	ldr	r0, [pc, #472]	; (8001050 <setStepper_x+0x2c0>)
 8000e76:	f002 fb23 	bl	80034c0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e80:	4877      	ldr	r0, [pc, #476]	; (8001060 <setStepper_x+0x2d0>)
 8000e82:	f002 fb1d 	bl	80034c0 <HAL_GPIO_WritePin>


				for(int step=0; step<2; step++){//saat yonunde
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e00f      	b.n	8000eac <setStepper_x+0x11c>

					fullStepRotate_x(step);
 8000e8c:	69f8      	ldr	r0, [r7, #28]
 8000e8e:	f7ff fda5 	bl	80009dc <fullStepRotate_x>
					x_direction_flag_forward=1;
 8000e92:	4b72      	ldr	r3, [pc, #456]	; (800105c <setStepper_x+0x2cc>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
					x_direction_flag_backward=0;
 8000e98:	4b6f      	ldr	r3, [pc, #444]	; (8001058 <setStepper_x+0x2c8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

					delay_us(1000);
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f7ff fd7b 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){//saat yonunde
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	ddec      	ble.n	8000e8c <setStepper_x+0xfc>
				}
				current_angel_x+=1.8;
 8000eb2:	4b65      	ldr	r3, [pc, #404]	; (8001048 <setStepper_x+0x2b8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fb46 	bl	8000548 <__aeabi_f2d>
 8000ebc:	a35e      	add	r3, pc, #376	; (adr r3, 8001038 <setStepper_x+0x2a8>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff f9e3 	bl	800028c <__adddf3>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fb93 	bl	80005f8 <__aeabi_d2f>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a5c      	ldr	r2, [pc, #368]	; (8001048 <setStepper_x+0x2b8>)
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e082      	b.n	8000fe0 <setStepper_x+0x250>


			}else if(direction==1){// saat yonunun tersi
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d17f      	bne.n	8000fe0 <setStepper_x+0x250>
				HAL_GPIO_WritePin(GPIOA, dir_x_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	485a      	ldr	r0, [pc, #360]	; (8001050 <setStepper_x+0x2c0>)
 8000ee6:	f002 faeb 	bl	80034c0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	485b      	ldr	r0, [pc, #364]	; (8001060 <setStepper_x+0x2d0>)
 8000ef2:	f002 fae5 	bl	80034c0 <HAL_GPIO_WritePin>


				for(int step=0; step<2; step++){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e01b      	b.n	8000f34 <setStepper_x+0x1a4>
					if(HAL_GPIO_ReadPin(x_limit_GPIO_Port,x_limit_Pin)){
 8000efc:	2101      	movs	r1, #1
 8000efe:	4855      	ldr	r0, [pc, #340]	; (8001054 <setStepper_x+0x2c4>)
 8000f00:	f002 fac6 	bl	8003490 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <setStepper_x+0x184>
								current_angel_x=0;
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <setStepper_x+0x2b8>)
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

								break;
 8000f12:	e012      	b.n	8000f3a <setStepper_x+0x1aa>


					}			fullStepRotate_x(step);
 8000f14:	69b8      	ldr	r0, [r7, #24]
 8000f16:	f7ff fd61 	bl	80009dc <fullStepRotate_x>
								x_direction_flag_backward=1;
 8000f1a:	4b4f      	ldr	r3, [pc, #316]	; (8001058 <setStepper_x+0x2c8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
								x_direction_flag_forward=0;
 8000f20:	4b4e      	ldr	r3, [pc, #312]	; (800105c <setStepper_x+0x2cc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
								delay_us(1000);
 8000f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2a:	f7ff fd37 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3301      	adds	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	dde0      	ble.n	8000efc <setStepper_x+0x16c>



				}
				current_angel_x-=1.8;
 8000f3a:	4b43      	ldr	r3, [pc, #268]	; (8001048 <setStepper_x+0x2b8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb02 	bl	8000548 <__aeabi_f2d>
 8000f44:	a33c      	add	r3, pc, #240	; (adr r3, 8001038 <setStepper_x+0x2a8>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff f99d 	bl	8000288 <__aeabi_dsub>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fb4f 	bl	80005f8 <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <setStepper_x+0x2b8>)
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e03e      	b.n	8000fe0 <setStepper_x+0x250>

			}

		}
		else{
			HAL_UART_Transmit(&huart1, (uint8_t*)limit_message_y,strlen(limit_message_y),100);
 8000f62:	4b40      	ldr	r3, [pc, #256]	; (8001064 <setStepper_x+0x2d4>)
 8000f64:	681c      	ldr	r4, [r3, #0]
 8000f66:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <setStepper_x+0x2d4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f930 	bl	80001d0 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	4621      	mov	r1, r4
 8000f78:	483b      	ldr	r0, [pc, #236]	; (8001068 <setStepper_x+0x2d8>)
 8000f7a:	f003 fe32 	bl	8004be2 <HAL_UART_Transmit>

			if(direction==1){
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d12d      	bne.n	8000fe0 <setStepper_x+0x250>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2104      	movs	r1, #4
 8000f88:	4831      	ldr	r0, [pc, #196]	; (8001050 <setStepper_x+0x2c0>)
 8000f8a:	f002 fa99 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e00f      	b.n	8000fb4 <setStepper_x+0x224>
					fullStepRotate_x(step);
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff fd21 	bl	80009dc <fullStepRotate_x>
					delay_us(5000);
 8000f9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f9e:	f7ff fcfd 	bl	800099c <delay_us>
					x_direction_flag_backward=1;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <setStepper_x+0x2c8>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
					x_direction_flag_forward=0;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <setStepper_x+0x2cc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				for(int step=0; step<2; step++){
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	ddec      	ble.n	8000f94 <setStepper_x+0x204>
			}
				current_angel_x-=1.8;
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <setStepper_x+0x2b8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fac2 	bl	8000548 <__aeabi_f2d>
 8000fc4:	a31c      	add	r3, pc, #112	; (adr r3, 8001038 <setStepper_x+0x2a8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff f95d 	bl	8000288 <__aeabi_dsub>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fb0f 	bl	80005f8 <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <setStepper_x+0x2b8>)
 8000fde:	6013      	str	r3, [r2, #0]
	for(int seq=0; seq<=stepNumber_x; seq++){
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <setStepper_x+0x2b4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f77f aee9 	ble.w	8000dc4 <setStepper_x+0x34>
 8000ff2:	e000      	b.n	8000ff6 <setStepper_x+0x266>
			break;
 8000ff4:	bf00      	nop

		}
	}

}
	if(x_direction_flag_forward==1&&x_direction_flag_backward==0){
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <setStepper_x+0x2cc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10a      	bne.n	8001014 <setStepper_x+0x284>
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <setStepper_x+0x2c8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <setStepper_x+0x284>
		//current_angel_x+=angle;
		x_direction_flag_forward=0;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <setStepper_x+0x2cc>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		x_direction_flag_backward=0;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <setStepper_x+0x2c8>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
	else if (x_direction_flag_forward==0&&x_direction_flag_backward==1){
		//current_angel_x-=angle;
		x_direction_flag_forward=0;
		x_direction_flag_backward=0;
	}
}
 8001012:	e00d      	b.n	8001030 <setStepper_x+0x2a0>
	else if (x_direction_flag_forward==0&&x_direction_flag_backward==1){
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <setStepper_x+0x2cc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <setStepper_x+0x2a0>
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <setStepper_x+0x2c8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <setStepper_x+0x2a0>
		x_direction_flag_forward=0;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <setStepper_x+0x2cc>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		x_direction_flag_backward=0;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <setStepper_x+0x2c8>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	372c      	adds	r7, #44	; 0x2c
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	cccccccd 	.word	0xcccccccd
 800103c:	3ffccccc 	.word	0x3ffccccc
 8001040:	3fe66666 	.word	0x3fe66666
 8001044:	200001ac 	.word	0x200001ac
 8001048:	200001f8 	.word	0x200001f8
 800104c:	45fa0000 	.word	0x45fa0000
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	2000020c 	.word	0x2000020c
 800105c:	20000208 	.word	0x20000208
 8001060:	40020c00 	.word	0x40020c00
 8001064:	20000000 	.word	0x20000000
 8001068:	20000120 	.word	0x20000120

0800106c <fullStepRotate_e>:


//MOTOR E KONTROL SWITCH CASE
void fullStepRotate_e(int step){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

		switch(step){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <fullStepRotate_e+0x16>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d006      	beq.n	800108e <fullStepRotate_e+0x22>
				HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin, GPIO_PIN_RESET);

			break;
		}

	}
 8001080:	e00b      	b.n	800109a <fullStepRotate_e+0x2e>
				HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2110      	movs	r1, #16
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <fullStepRotate_e+0x38>)
 8001088:	f002 fa1a 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 800108c:	e005      	b.n	800109a <fullStepRotate_e+0x2e>
				HAL_GPIO_WritePin(step_e_GPIO_Port,step_e_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <fullStepRotate_e+0x38>)
 8001094:	f002 fa14 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 8001098:	bf00      	nop
	}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020800 	.word	0x40020800

080010a8 <fullStepRotate_d>:
//MOTOR D KONTROL SWITCH CASE

void fullStepRotate_d(int step){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

		switch(step){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <fullStepRotate_d+0x16>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d006      	beq.n	80010ca <fullStepRotate_d+0x22>
				HAL_GPIO_WritePin(GPIOA, step_d_Pin, GPIO_PIN_RESET);

			break;
		}

	}
 80010bc:	e00b      	b.n	80010d6 <fullStepRotate_d+0x2e>
				HAL_GPIO_WritePin(GPIOA, step_d_Pin, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2110      	movs	r1, #16
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <fullStepRotate_d+0x38>)
 80010c4:	f002 f9fc 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 80010c8:	e005      	b.n	80010d6 <fullStepRotate_d+0x2e>
				HAL_GPIO_WritePin(GPIOA, step_d_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2110      	movs	r1, #16
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <fullStepRotate_d+0x38>)
 80010d0:	f002 f9f6 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 80010d4:	bf00      	nop
	}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020000 	.word	0x40020000

080010e4 <fullStepRotate_c>:
//MOTOR C KONTROL SWITCH CASE

void fullStepRotate_c(int step){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

		switch(step){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <fullStepRotate_c+0x16>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d006      	beq.n	8001106 <fullStepRotate_c+0x22>
				HAL_GPIO_WritePin(GPIOA, step_c_Pin, GPIO_PIN_RESET);

			break;
		}

	}
 80010f8:	e00b      	b.n	8001112 <fullStepRotate_c+0x2e>
				HAL_GPIO_WritePin(GPIOA, step_c_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <fullStepRotate_c+0x38>)
 8001100:	f002 f9de 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 8001104:	e005      	b.n	8001112 <fullStepRotate_c+0x2e>
				HAL_GPIO_WritePin(GPIOA, step_c_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <fullStepRotate_c+0x38>)
 800110c:	f002 f9d8 	bl	80034c0 <HAL_GPIO_WritePin>
			break;
 8001110:	bf00      	nop
	}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020000 	.word	0x40020000

08001120 <setStepper_e>:
void setStepper_e(int angle,int direction,int speed){
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08b      	sub	sp, #44	; 0x2c
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	float perAngle=1.8;//  360/200=1.8(per step angle)
 800112c:	4b96      	ldr	r3, [pc, #600]	; (8001388 <setStepper_e+0x268>)
 800112e:	613b      	str	r3, [r7, #16]
	stepNumber_e=(int)(angle/perAngle);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800113a:	ed97 7a04 	vldr	s14, [r7, #16]
 800113e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001146:	ee17 2a90 	vmov	r2, s15
 800114a:	4b90      	ldr	r3, [pc, #576]	; (800138c <setStepper_e+0x26c>)
 800114c:	601a      	str	r2, [r3, #0]

	for(int seq=0; seq<=stepNumber_e; seq++){
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	e0ec      	b.n	800132e <setStepper_e+0x20e>

		if(current_angel_e>18300){
 8001154:	4b8e      	ldr	r3, [pc, #568]	; (8001390 <setStepper_e+0x270>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001394 <setStepper_e+0x274>
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	dd32      	ble.n	80011ce <setStepper_e+0xae>
			if(direction==1){// saat yonunun tersi
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	f040 80e6 	bne.w	800133c <setStepper_e+0x21c>
				HAL_GPIO_WritePin(dir_e_GPIO_Port, dir_e_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2120      	movs	r1, #32
 8001174:	4888      	ldr	r0, [pc, #544]	; (8001398 <setStepper_e+0x278>)
 8001176:	f002 f9a3 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	e00f      	b.n	80011a0 <setStepper_e+0x80>
					fullStepRotate_e(step);
 8001180:	6a38      	ldr	r0, [r7, #32]
 8001182:	f7ff ff73 	bl	800106c <fullStepRotate_e>
					e_direction_flag_backward=1;
 8001186:	4b85      	ldr	r3, [pc, #532]	; (800139c <setStepper_e+0x27c>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
					e_direction_flag_forward=0;
 800118c:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <setStepper_e+0x280>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
					delay_us(5000);
 8001192:	f241 3088 	movw	r0, #5000	; 0x1388
 8001196:	f7ff fc01 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	3301      	adds	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	ddec      	ble.n	8001180 <setStepper_e+0x60>
				}
				current_angel_e-=1.8;
 80011a6:	4b7a      	ldr	r3, [pc, #488]	; (8001390 <setStepper_e+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9cc 	bl	8000548 <__aeabi_f2d>
 80011b0:	a373      	add	r3, pc, #460	; (adr r3, 8001380 <setStepper_e+0x260>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff f867 	bl	8000288 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fa19 	bl	80005f8 <__aeabi_d2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a71      	ldr	r2, [pc, #452]	; (8001390 <setStepper_e+0x270>)
 80011ca:	6013      	str	r3, [r2, #0]

		}
			break;
 80011cc:	e0b6      	b.n	800133c <setStepper_e+0x21c>
		}

		if(current_angel_e<18300){
 80011ce:	4b70      	ldr	r3, [pc, #448]	; (8001390 <setStepper_e+0x270>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001394 <setStepper_e+0x274>
 80011d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	d563      	bpl.n	80012aa <setStepper_e+0x18a>

			if(direction==0){
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12e      	bne.n	8001246 <setStepper_e+0x126>
				HAL_GPIO_WritePin(dir_e_GPIO_Port, dir_e_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	486a      	ldr	r0, [pc, #424]	; (8001398 <setStepper_e+0x278>)
 80011ee:	f002 f967 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){//saat yonunde
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e00f      	b.n	8001218 <setStepper_e+0xf8>
					fullStepRotate_e(step);
 80011f8:	69f8      	ldr	r0, [r7, #28]
 80011fa:	f7ff ff37 	bl	800106c <fullStepRotate_e>
					e_direction_flag_forward=1;
 80011fe:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <setStepper_e+0x280>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
					e_direction_flag_backward=0;
 8001204:	4b65      	ldr	r3, [pc, #404]	; (800139c <setStepper_e+0x27c>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

					delay_us(5000);
 800120a:	f241 3088 	movw	r0, #5000	; 0x1388
 800120e:	f7ff fbc5 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){//saat yonunde
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b01      	cmp	r3, #1
 800121c:	ddec      	ble.n	80011f8 <setStepper_e+0xd8>
				}
				current_angel_e+=1.8;
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <setStepper_e+0x270>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f990 	bl	8000548 <__aeabi_f2d>
 8001228:	a355      	add	r3, pc, #340	; (adr r3, 8001380 <setStepper_e+0x260>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f82d 	bl	800028c <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a53      	ldr	r2, [pc, #332]	; (8001390 <setStepper_e+0x270>)
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e070      	b.n	8001328 <setStepper_e+0x208>

			}else if(direction==1){// saat yonunun tersi
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d16d      	bne.n	8001328 <setStepper_e+0x208>
				HAL_GPIO_WritePin(dir_e_GPIO_Port, dir_e_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2120      	movs	r1, #32
 8001250:	4851      	ldr	r0, [pc, #324]	; (8001398 <setStepper_e+0x278>)
 8001252:	f002 f935 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	e00f      	b.n	800127c <setStepper_e+0x15c>
					fullStepRotate_e(step);
 800125c:	69b8      	ldr	r0, [r7, #24]
 800125e:	f7ff ff05 	bl	800106c <fullStepRotate_e>
					e_direction_flag_backward=1;
 8001262:	4b4e      	ldr	r3, [pc, #312]	; (800139c <setStepper_e+0x27c>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
					e_direction_flag_forward=0;
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <setStepper_e+0x280>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
					delay_us(5000);
 800126e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001272:	f7ff fb93 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3301      	adds	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b01      	cmp	r3, #1
 8001280:	ddec      	ble.n	800125c <setStepper_e+0x13c>
				}
				current_angel_e+=1.8;
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <setStepper_e+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f95e 	bl	8000548 <__aeabi_f2d>
 800128c:	a33c      	add	r3, pc, #240	; (adr r3, 8001380 <setStepper_e+0x260>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7fe fffb 	bl	800028c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff f9ab 	bl	80005f8 <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a3a      	ldr	r2, [pc, #232]	; (8001390 <setStepper_e+0x270>)
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e03e      	b.n	8001328 <setStepper_e+0x208>

			}

		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t*)limit_message_y,strlen(limit_message_y),100);
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <setStepper_e+0x284>)
 80012ac:	681c      	ldr	r4, [r3, #0]
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <setStepper_e+0x284>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff8c 	bl	80001d0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	4621      	mov	r1, r4
 80012c0:	4839      	ldr	r0, [pc, #228]	; (80013a8 <setStepper_e+0x288>)
 80012c2:	f003 fc8e 	bl	8004be2 <HAL_UART_Transmit>

			if(direction==1){
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d12d      	bne.n	8001328 <setStepper_e+0x208>
				HAL_GPIO_WritePin(dir_e_GPIO_Port, dir_e_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2120      	movs	r1, #32
 80012d0:	4831      	ldr	r0, [pc, #196]	; (8001398 <setStepper_e+0x278>)
 80012d2:	f002 f8f5 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e00f      	b.n	80012fc <setStepper_e+0x1dc>
					fullStepRotate_e(step);
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f7ff fec5 	bl	800106c <fullStepRotate_e>
					delay_us(5000);
 80012e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80012e6:	f7ff fb59 	bl	800099c <delay_us>
					e_direction_flag_backward=1;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <setStepper_e+0x27c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
					e_direction_flag_forward=0;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <setStepper_e+0x280>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
				for(int step=0; step<2; step++){
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	ddec      	ble.n	80012dc <setStepper_e+0x1bc>
			}
				current_angel_e-=1.8;
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <setStepper_e+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f91e 	bl	8000548 <__aeabi_f2d>
 800130c:	a31c      	add	r3, pc, #112	; (adr r3, 8001380 <setStepper_e+0x260>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7fe ffb9 	bl	8000288 <__aeabi_dsub>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff f96b 	bl	80005f8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <setStepper_e+0x270>)
 8001326:	6013      	str	r3, [r2, #0]
	for(int seq=0; seq<=stepNumber_e; seq++){
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	3301      	adds	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <setStepper_e+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001334:	429a      	cmp	r2, r3
 8001336:	f77f af0d 	ble.w	8001154 <setStepper_e+0x34>
 800133a:	e000      	b.n	800133e <setStepper_e+0x21e>
			break;
 800133c:	bf00      	nop

		}
	}

}
	if(e_direction_flag_forward==1&&e_direction_flag_backward==0){
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <setStepper_e+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10a      	bne.n	800135c <setStepper_e+0x23c>
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <setStepper_e+0x27c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <setStepper_e+0x23c>
		//current_angel_x+=angle;
		e_direction_flag_forward=0;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <setStepper_e+0x280>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
		e_direction_flag_backward=0;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <setStepper_e+0x27c>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	else if (e_direction_flag_forward==0&&e_direction_flag_backward==1){
		//current_angel_x-=angle;
		e_direction_flag_forward=0;
		e_direction_flag_backward=0;
	}
}
 800135a:	e00d      	b.n	8001378 <setStepper_e+0x258>
	else if (e_direction_flag_forward==0&&e_direction_flag_backward==1){
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <setStepper_e+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <setStepper_e+0x258>
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <setStepper_e+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <setStepper_e+0x258>
		e_direction_flag_forward=0;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <setStepper_e+0x280>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
		e_direction_flag_backward=0;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <setStepper_e+0x27c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	372c      	adds	r7, #44	; 0x2c
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	3ffccccc 	.word	0x3ffccccc
 8001388:	3fe66666 	.word	0x3fe66666
 800138c:	200001b0 	.word	0x200001b0
 8001390:	200001fc 	.word	0x200001fc
 8001394:	468ef800 	.word	0x468ef800
 8001398:	40020800 	.word	0x40020800
 800139c:	20000214 	.word	0x20000214
 80013a0:	20000210 	.word	0x20000210
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000164 	.word	0x20000164
 80013ac:	00000000 	.word	0x00000000

080013b0 <setStepper_d>:
//MOTOR D
void setStepper_d(int angle,int direction,int speed){
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b091      	sub	sp, #68	; 0x44
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
	float perAngle=1.8;//  360/200=1.8(per step angle)
 80013bc:	4bb2      	ldr	r3, [pc, #712]	; (8001688 <setStepper_d+0x2d8>)
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
	stepNumber_d=(int)(angle/perAngle);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	4bac      	ldr	r3, [pc, #688]	; (800168c <setStepper_d+0x2dc>)
 80013dc:	601a      	str	r2, [r3, #0]

	for(int seq=0; seq<=stepNumber_d; seq++){
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e2:	e146      	b.n	8001672 <setStepper_d+0x2c2>

		if(current_angel_d>5000){
 80013e4:	4baa      	ldr	r3, [pc, #680]	; (8001690 <setStepper_d+0x2e0>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001694 <setStepper_d+0x2e4>
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dd3e      	ble.n	8001476 <setStepper_d+0xc6>

			if(direction==1){// saat yonunun tersi
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 815e 	bne.w	80016bc <setStepper_d+0x30c>
				HAL_GPIO_WritePin(GPIOA, dir_d_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2120      	movs	r1, #32
 8001404:	48a4      	ldr	r0, [pc, #656]	; (8001698 <setStepper_d+0x2e8>)
 8001406:	f002 f85b 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){
 800140a:	2300      	movs	r3, #0
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
 800140e:	e01b      	b.n	8001448 <setStepper_d+0x98>
					if(HAL_GPIO_ReadPin(d_limit_GPIO_Port,d_limit_Pin)){
 8001410:	2102      	movs	r1, #2
 8001412:	48a2      	ldr	r0, [pc, #648]	; (800169c <setStepper_d+0x2ec>)
 8001414:	f002 f83c 	bl	8003490 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <setStepper_d+0x78>
						current_angel_d=0;
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <setStepper_d+0x2e0>)
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
						break;
 8001426:	e012      	b.n	800144e <setStepper_d+0x9e>


					}
					fullStepRotate_d(step);
 8001428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800142a:	f7ff fe3d 	bl	80010a8 <fullStepRotate_d>
					d_direction_flag_backward=1;
 800142e:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <setStepper_d+0x2f0>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
					d_direction_flag_forward=0;
 8001434:	4b9b      	ldr	r3, [pc, #620]	; (80016a4 <setStepper_d+0x2f4>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
					delay_us(600);
 800143a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800143e:	f7ff faad 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 8001442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001444:	3301      	adds	r3, #1
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
 8001448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800144a:	2b01      	cmp	r3, #1
 800144c:	dde0      	ble.n	8001410 <setStepper_d+0x60>
				}
				current_angel_d-=1.8;
 800144e:	4b90      	ldr	r3, [pc, #576]	; (8001690 <setStepper_d+0x2e0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f878 	bl	8000548 <__aeabi_f2d>
 8001458:	a389      	add	r3, pc, #548	; (adr r3, 8001680 <setStepper_d+0x2d0>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe ff13 	bl	8000288 <__aeabi_dsub>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff f8c5 	bl	80005f8 <__aeabi_d2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4a87      	ldr	r2, [pc, #540]	; (8001690 <setStepper_d+0x2e0>)
 8001472:	6013      	str	r3, [r2, #0]



		}
			break;
 8001474:	e122      	b.n	80016bc <setStepper_d+0x30c>
		}

		if(current_angel_d<5000){
 8001476:	4b86      	ldr	r3, [pc, #536]	; (8001690 <setStepper_d+0x2e0>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001694 <setStepper_d+0x2e4>
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	f140 80a5 	bpl.w	80015d6 <setStepper_d+0x226>



			if(direction==0){
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d148      	bne.n	8001524 <setStepper_d+0x174>
				HAL_GPIO_WritePin(GPIOA, dir_d_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	4880      	ldr	r0, [pc, #512]	; (8001698 <setStepper_d+0x2e8>)
 8001498:	f002 f812 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){//saat yonunde
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
 80014a0:	e00f      	b.n	80014c2 <setStepper_d+0x112>

					fullStepRotate_d(step);
 80014a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014a4:	f7ff fe00 	bl	80010a8 <fullStepRotate_d>
					d_direction_flag_forward=1;
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <setStepper_d+0x2f4>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
					d_direction_flag_backward=0;
 80014ae:	4b7c      	ldr	r3, [pc, #496]	; (80016a0 <setStepper_d+0x2f0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

					delay_us(600);
 80014b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80014b8:	f7ff fa70 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){//saat yonunde
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	3301      	adds	r3, #1
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	ddec      	ble.n	80014a2 <setStepper_d+0xf2>
				}
				current_angel_d+=1.8;
 80014c8:	4b71      	ldr	r3, [pc, #452]	; (8001690 <setStepper_d+0x2e0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	a36b      	add	r3, pc, #428	; (adr r3, 8001680 <setStepper_d+0x2d0>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7fe fed8 	bl	800028c <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff f888 	bl	80005f8 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <setStepper_d+0x2e0>)
 80014ec:	6013      	str	r3, [r2, #0]



				  char message[10];
				  sprintf(message, "Deger -D-: %d\r\n", (int)current_angel_d);
 80014ee:	4b68      	ldr	r3, [pc, #416]	; (8001690 <setStepper_d+0x2e0>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	ee17 2a90 	vmov	r2, s15
 8001500:	4969      	ldr	r1, [pc, #420]	; (80016a8 <setStepper_d+0x2f8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fbce 	bl	8005ca4 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 10);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe5f 	bl	80001d0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 011c 	add.w	r1, r7, #28
 800151a:	230a      	movs	r3, #10
 800151c:	4863      	ldr	r0, [pc, #396]	; (80016ac <setStepper_d+0x2fc>)
 800151e:	f003 fb60 	bl	8004be2 <HAL_UART_Transmit>
 8001522:	e0a3      	b.n	800166c <setStepper_d+0x2bc>


			}else if(direction==1){// saat yonunun tersi
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	f040 80a0 	bne.w	800166c <setStepper_d+0x2bc>
				HAL_GPIO_WritePin(GPIOA, dir_d_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2120      	movs	r1, #32
 8001530:	4859      	ldr	r0, [pc, #356]	; (8001698 <setStepper_d+0x2e8>)
 8001532:	f001 ffc5 	bl	80034c0 <HAL_GPIO_WritePin>


				for(int step=0; step<2; step++){
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
 800153a:	e01b      	b.n	8001574 <setStepper_d+0x1c4>
					if(HAL_GPIO_ReadPin(GPIOB,d_limit_Pin)){
 800153c:	2102      	movs	r1, #2
 800153e:	4857      	ldr	r0, [pc, #348]	; (800169c <setStepper_d+0x2ec>)
 8001540:	f001 ffa6 	bl	8003490 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <setStepper_d+0x1a4>
						current_angel_d=0;
 800154a:	4b51      	ldr	r3, [pc, #324]	; (8001690 <setStepper_d+0x2e0>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
						break;
 8001552:	e012      	b.n	800157a <setStepper_d+0x1ca>


					}
					fullStepRotate_d(step);
 8001554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001556:	f7ff fda7 	bl	80010a8 <fullStepRotate_d>
					d_direction_flag_backward=1;
 800155a:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <setStepper_d+0x2f0>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
					d_direction_flag_forward=0;
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <setStepper_d+0x2f4>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
					delay_us(600);
 8001566:	f44f 7016 	mov.w	r0, #600	; 0x258
 800156a:	f7ff fa17 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 800156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001570:	3301      	adds	r3, #1
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
 8001574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001576:	2b01      	cmp	r3, #1
 8001578:	dde0      	ble.n	800153c <setStepper_d+0x18c>
				}
				current_angel_d-=1.8;
 800157a:	4b45      	ldr	r3, [pc, #276]	; (8001690 <setStepper_d+0x2e0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffe2 	bl	8000548 <__aeabi_f2d>
 8001584:	a33e      	add	r3, pc, #248	; (adr r3, 8001680 <setStepper_d+0x2d0>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe fe7d 	bl	8000288 <__aeabi_dsub>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff f82f 	bl	80005f8 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <setStepper_d+0x2e0>)
 800159e:	6013      	str	r3, [r2, #0]

				  char message[10];
				  sprintf(message, "deger -D-: %d\r\n", (int)current_angel_d);
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <setStepper_d+0x2e0>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	ee17 2a90 	vmov	r2, s15
 80015b2:	493f      	ldr	r1, [pc, #252]	; (80016b0 <setStepper_d+0x300>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fb75 	bl	8005ca4 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 10);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fe06 	bl	80001d0 <strlen>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f107 0110 	add.w	r1, r7, #16
 80015cc:	230a      	movs	r3, #10
 80015ce:	4837      	ldr	r0, [pc, #220]	; (80016ac <setStepper_d+0x2fc>)
 80015d0:	f003 fb07 	bl	8004be2 <HAL_UART_Transmit>
 80015d4:	e04a      	b.n	800166c <setStepper_d+0x2bc>
			}

		}
		else{
			HAL_UART_Transmit(&huart1, (uint8_t*)limit_message_y,strlen(limit_message_y),100);
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <setStepper_d+0x304>)
 80015d8:	681c      	ldr	r4, [r3, #0]
 80015da:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <setStepper_d+0x304>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fdf6 	bl	80001d0 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	2364      	movs	r3, #100	; 0x64
 80015ea:	4621      	mov	r1, r4
 80015ec:	4832      	ldr	r0, [pc, #200]	; (80016b8 <setStepper_d+0x308>)
 80015ee:	f003 faf8 	bl	8004be2 <HAL_UART_Transmit>

			if(direction==1){
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d139      	bne.n	800166c <setStepper_d+0x2bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2104      	movs	r1, #4
 80015fc:	4826      	ldr	r0, [pc, #152]	; (8001698 <setStepper_d+0x2e8>)
 80015fe:	f001 ff5f 	bl	80034c0 <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(d_limit_GPIO_Port,d_limit_Pin)){
 8001602:	2102      	movs	r1, #2
 8001604:	4825      	ldr	r0, [pc, #148]	; (800169c <setStepper_d+0x2ec>)
 8001606:	f001 ff43 	bl	8003490 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <setStepper_d+0x26a>
					current_angel_d=0;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <setStepper_d+0x2e0>)
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
					break;
 8001618:	e051      	b.n	80016be <setStepper_d+0x30e>


				}

				for(int step=0; step<2; step++){
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161e:	e00f      	b.n	8001640 <setStepper_d+0x290>
					fullStepRotate_d(step);
 8001620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001622:	f7ff fd41 	bl	80010a8 <fullStepRotate_d>
					delay_us(600);
 8001626:	f44f 7016 	mov.w	r0, #600	; 0x258
 800162a:	f7ff f9b7 	bl	800099c <delay_us>
					d_direction_flag_backward=1;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <setStepper_d+0x2f0>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
					d_direction_flag_forward=0;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <setStepper_d+0x2f4>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
				for(int step=0; step<2; step++){
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	3301      	adds	r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	2b01      	cmp	r3, #1
 8001644:	ddec      	ble.n	8001620 <setStepper_d+0x270>
			}
				current_angel_d-=1.8;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <setStepper_d+0x2e0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff7c 	bl	8000548 <__aeabi_f2d>
 8001650:	a30b      	add	r3, pc, #44	; (adr r3, 8001680 <setStepper_d+0x2d0>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe fe17 	bl	8000288 <__aeabi_dsub>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7fe ffc9 	bl	80005f8 <__aeabi_d2f>
 8001666:	4603      	mov	r3, r0
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <setStepper_d+0x2e0>)
 800166a:	6013      	str	r3, [r2, #0]
	for(int seq=0; seq<=stepNumber_d; seq++){
 800166c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166e:	3301      	adds	r3, #1
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <setStepper_d+0x2dc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001678:	429a      	cmp	r2, r3
 800167a:	f77f aeb3 	ble.w	80013e4 <setStepper_d+0x34>
 800167e:	e01e      	b.n	80016be <setStepper_d+0x30e>
 8001680:	cccccccd 	.word	0xcccccccd
 8001684:	3ffccccc 	.word	0x3ffccccc
 8001688:	3fe66666 	.word	0x3fe66666
 800168c:	200001b4 	.word	0x200001b4
 8001690:	20000204 	.word	0x20000204
 8001694:	459c4000 	.word	0x459c4000
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400
 80016a0:	2000021c 	.word	0x2000021c
 80016a4:	20000218 	.word	0x20000218
 80016a8:	080066cc 	.word	0x080066cc
 80016ac:	20000164 	.word	0x20000164
 80016b0:	080066dc 	.word	0x080066dc
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000120 	.word	0x20000120
			break;
 80016bc:	bf00      	nop

		}
	}

}
	if(d_direction_flag_forward==1&&d_direction_flag_backward==0){
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <setStepper_d+0x350>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d10a      	bne.n	80016dc <setStepper_d+0x32c>
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <setStepper_d+0x354>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <setStepper_d+0x32c>
		//current_angel_x+=angle;
		d_direction_flag_forward=0;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <setStepper_d+0x350>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
		d_direction_flag_backward=0;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <setStepper_d+0x354>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
	else if (d_direction_flag_forward==0&&d_direction_flag_backward==1){
		//current_angel_x-=angle;
		d_direction_flag_forward=0;
		d_direction_flag_backward=0;
	}
}
 80016da:	e00d      	b.n	80016f8 <setStepper_d+0x348>
	else if (d_direction_flag_forward==0&&d_direction_flag_backward==1){
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <setStepper_d+0x350>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <setStepper_d+0x348>
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <setStepper_d+0x354>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <setStepper_d+0x348>
		d_direction_flag_forward=0;
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <setStepper_d+0x350>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
		d_direction_flag_backward=0;
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <setStepper_d+0x354>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
}
 80016f8:	bf00      	nop
 80016fa:	3744      	adds	r7, #68	; 0x44
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000218 	.word	0x20000218
 8001704:	2000021c 	.word	0x2000021c

08001708 <setStepper_c>:
//MOTOR C KONTROL
void setStepper_c(int angle,int direction,int speed){
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	float perAngle=1.8;//  360/200=1.8(per step angle)
 8001714:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <setStepper_c+0x290>)
 8001716:	613b      	str	r3, [r7, #16]
	stepNumber_c=(int)(angle/perAngle);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001722:	ed97 7a04 	vldr	s14, [r7, #16]
 8001726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172e:	ee17 2a90 	vmov	r2, s15
 8001732:	4b9a      	ldr	r3, [pc, #616]	; (800199c <setStepper_c+0x294>)
 8001734:	601a      	str	r2, [r3, #0]

	for(int seq=0; seq<=stepNumber_c; seq++){
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e11b      	b.n	8001974 <setStepper_c+0x26c>

		if(current_angel_c>5000){
 800173c:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <setStepper_c+0x298>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80019a4 <setStepper_c+0x29c>
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	dd32      	ble.n	80017b6 <setStepper_c+0xae>

			if(direction==1){// saat yonunun tersi
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	f040 8115 	bne.w	8001982 <setStepper_c+0x27a>

				HAL_GPIO_WritePin(GPIOA, dir_c_Pin, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2140      	movs	r1, #64	; 0x40
 800175c:	4892      	ldr	r0, [pc, #584]	; (80019a8 <setStepper_c+0x2a0>)
 800175e:	f001 feaf 	bl	80034c0 <HAL_GPIO_WritePin>

				for(int step=0; step<2; step++){
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	e00f      	b.n	8001788 <setStepper_c+0x80>

					fullStepRotate_c(step);
 8001768:	6a38      	ldr	r0, [r7, #32]
 800176a:	f7ff fcbb 	bl	80010e4 <fullStepRotate_c>
					c_direction_flag_backward=1;
 800176e:	4b8f      	ldr	r3, [pc, #572]	; (80019ac <setStepper_c+0x2a4>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
					c_direction_flag_forward=0;
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <setStepper_c+0x2a8>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
					delay_us(600);
 800177a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800177e:	f7ff f90d 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	3301      	adds	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	2b01      	cmp	r3, #1
 800178c:	ddec      	ble.n	8001768 <setStepper_c+0x60>
				}
				current_angel_c-=1.8;
 800178e:	4b84      	ldr	r3, [pc, #528]	; (80019a0 <setStepper_c+0x298>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fed8 	bl	8000548 <__aeabi_f2d>
 8001798:	a37d      	add	r3, pc, #500	; (adr r3, 8001990 <setStepper_c+0x288>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fd73 	bl	8000288 <__aeabi_dsub>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7fe ff25 	bl	80005f8 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a7b      	ldr	r2, [pc, #492]	; (80019a0 <setStepper_c+0x298>)
 80017b2:	6013      	str	r3, [r2, #0]



		}
			break;
 80017b4:	e0e5      	b.n	8001982 <setStepper_c+0x27a>
		}

		if(current_angel_c<5000){
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <setStepper_c+0x298>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80019a4 <setStepper_c+0x29c>
 80017c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	f140 80b4 	bpl.w	8001934 <setStepper_c+0x22c>



			if(direction==0){
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d13a      	bne.n	8001848 <setStepper_c+0x140>
				HAL_GPIO_WritePin(GPIOA, dir_c_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2140      	movs	r1, #64	; 0x40
 80017d6:	4874      	ldr	r0, [pc, #464]	; (80019a8 <setStepper_c+0x2a0>)
 80017d8:	f001 fe72 	bl	80034c0 <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(c_limit_GPIO_Port,c_limit_Pin)){
 80017dc:	2104      	movs	r1, #4
 80017de:	4875      	ldr	r0, [pc, #468]	; (80019b4 <setStepper_c+0x2ac>)
 80017e0:	f001 fe56 	bl	8003490 <HAL_GPIO_ReadPin>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <setStepper_c+0xec>
					current_angel_c=0;
 80017ea:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <setStepper_c+0x298>)
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
					break;
 80017f2:	e0c7      	b.n	8001984 <setStepper_c+0x27c>
				}

				for(int step=0; step<2; step++){//saat yonunde
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e00f      	b.n	800181a <setStepper_c+0x112>
					fullStepRotate_c(step);
 80017fa:	69f8      	ldr	r0, [r7, #28]
 80017fc:	f7ff fc72 	bl	80010e4 <fullStepRotate_c>
					c_direction_flag_forward=1;
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <setStepper_c+0x2a8>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
					c_direction_flag_backward=0;
 8001806:	4b69      	ldr	r3, [pc, #420]	; (80019ac <setStepper_c+0x2a4>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

					delay_us(600);
 800180c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001810:	f7ff f8c4 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){//saat yonunde
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	3301      	adds	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	2b01      	cmp	r3, #1
 800181e:	ddec      	ble.n	80017fa <setStepper_c+0xf2>
				}
				current_angel_c+=1.8;
 8001820:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <setStepper_c+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe8f 	bl	8000548 <__aeabi_f2d>
 800182a:	a359      	add	r3, pc, #356	; (adr r3, 8001990 <setStepper_c+0x288>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fd2c 	bl	800028c <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7fe fedc 	bl	80005f8 <__aeabi_d2f>
 8001840:	4603      	mov	r3, r0
 8001842:	4a57      	ldr	r2, [pc, #348]	; (80019a0 <setStepper_c+0x298>)
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e075      	b.n	8001934 <setStepper_c+0x22c>


			}else if(direction==1){// saat yonunun tersi
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d133      	bne.n	80018b6 <setStepper_c+0x1ae>
				HAL_GPIO_WritePin(GPIOA, dir_c_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2140      	movs	r1, #64	; 0x40
 8001852:	4855      	ldr	r0, [pc, #340]	; (80019a8 <setStepper_c+0x2a0>)
 8001854:	f001 fe34 	bl	80034c0 <HAL_GPIO_WritePin>


				for(int step=0; step<2; step++){
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	e00f      	b.n	800187e <setStepper_c+0x176>
					fullStepRotate_c(step);
 800185e:	69b8      	ldr	r0, [r7, #24]
 8001860:	f7ff fc40 	bl	80010e4 <fullStepRotate_c>
					c_direction_flag_backward=1;
 8001864:	4b51      	ldr	r3, [pc, #324]	; (80019ac <setStepper_c+0x2a4>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
					c_direction_flag_forward=0;
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <setStepper_c+0x2a8>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
					delay_us(600);
 8001870:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001874:	f7ff f892 	bl	800099c <delay_us>
				for(int step=0; step<2; step++){
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	3301      	adds	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b01      	cmp	r3, #1
 8001882:	ddec      	ble.n	800185e <setStepper_c+0x156>
				}
				current_angel_c-=1.8;
 8001884:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <setStepper_c+0x298>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	a340      	add	r3, pc, #256	; (adr r3, 8001990 <setStepper_c+0x288>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fcf8 	bl	8000288 <__aeabi_dsub>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_d2f>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a3e      	ldr	r2, [pc, #248]	; (80019a0 <setStepper_c+0x298>)
 80018a8:	6013      	str	r3, [r2, #0]

				step_num_check_c--;
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <setStepper_c+0x2b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <setStepper_c+0x2b0>)
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e03e      	b.n	8001934 <setStepper_c+0x22c>

		}
		else{
			HAL_UART_Transmit(&huart1, (uint8_t*)limit_message_y,strlen(limit_message_y),100);
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <setStepper_c+0x2b4>)
 80018b8:	681c      	ldr	r4, [r3, #0]
 80018ba:	4b40      	ldr	r3, [pc, #256]	; (80019bc <setStepper_c+0x2b4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fc86 	bl	80001d0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	2364      	movs	r3, #100	; 0x64
 80018ca:	4621      	mov	r1, r4
 80018cc:	483c      	ldr	r0, [pc, #240]	; (80019c0 <setStepper_c+0x2b8>)
 80018ce:	f003 f988 	bl	8004be2 <HAL_UART_Transmit>

			if(direction==1){
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d12d      	bne.n	8001934 <setStepper_c+0x22c>
				HAL_GPIO_WritePin(GPIOA, dir_c_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2140      	movs	r1, #64	; 0x40
 80018dc:	4832      	ldr	r0, [pc, #200]	; (80019a8 <setStepper_c+0x2a0>)
 80018de:	f001 fdef 	bl	80034c0 <HAL_GPIO_WritePin>


				for(int step=0; step<2; step++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e00f      	b.n	8001908 <setStepper_c+0x200>
					fullStepRotate_c(step);
 80018e8:	6978      	ldr	r0, [r7, #20]
 80018ea:	f7ff fbfb 	bl	80010e4 <fullStepRotate_c>
					delay_us(600);
 80018ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80018f2:	f7ff f853 	bl	800099c <delay_us>
					c_direction_flag_backward=1;
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <setStepper_c+0x2a4>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
					c_direction_flag_forward=0;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <setStepper_c+0x2a8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
				for(int step=0; step<2; step++){
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b01      	cmp	r3, #1
 800190c:	ddec      	ble.n	80018e8 <setStepper_c+0x1e0>
			}
				current_angel_c-=1.8;
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <setStepper_c+0x298>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe18 	bl	8000548 <__aeabi_f2d>
 8001918:	a31d      	add	r3, pc, #116	; (adr r3, 8001990 <setStepper_c+0x288>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fcb3 	bl	8000288 <__aeabi_dsub>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7fe fe65 	bl	80005f8 <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <setStepper_c+0x298>)
 8001932:	6013      	str	r3, [r2, #0]

		}
	}

}
	if(c_direction_flag_forward==1&&c_direction_flag_backward==0){
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <setStepper_c+0x2a8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10a      	bne.n	8001952 <setStepper_c+0x24a>
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <setStepper_c+0x2a4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <setStepper_c+0x24a>
		//current_angel_x+=angle;
		c_direction_flag_forward=0;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <setStepper_c+0x2a8>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
		c_direction_flag_backward=0;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <setStepper_c+0x2a4>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e00d      	b.n	800196e <setStepper_c+0x266>
	}
	else if (c_direction_flag_forward==0&&c_direction_flag_backward==1){
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <setStepper_c+0x2a8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <setStepper_c+0x266>
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <setStepper_c+0x2a4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d105      	bne.n	800196e <setStepper_c+0x266>
		//current_angel_x-=angle;
		c_direction_flag_forward=0;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <setStepper_c+0x2a8>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
		c_direction_flag_backward=0;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <setStepper_c+0x2a4>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	for(int seq=0; seq<=stepNumber_c; seq++){
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	3301      	adds	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <setStepper_c+0x294>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197a:	429a      	cmp	r2, r3
 800197c:	f77f aede 	ble.w	800173c <setStepper_c+0x34>
	}
}}
 8001980:	e000      	b.n	8001984 <setStepper_c+0x27c>
			break;
 8001982:	bf00      	nop
}}
 8001984:	bf00      	nop
 8001986:	372c      	adds	r7, #44	; 0x2c
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	f3af 8000 	nop.w
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	3ffccccc 	.word	0x3ffccccc
 8001998:	3fe66666 	.word	0x3fe66666
 800199c:	200001b8 	.word	0x200001b8
 80019a0:	20000200 	.word	0x20000200
 80019a4:	459c4000 	.word	0x459c4000
 80019a8:	40020000 	.word	0x40020000
 80019ac:	20000224 	.word	0x20000224
 80019b0:	20000220 	.word	0x20000220
 80019b4:	40020400 	.word	0x40020400
 80019b8:	20000258 	.word	0x20000258
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000120 	.word	0x20000120

080019c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a7f      	ldr	r2, [pc, #508]	; (8001bcc <HAL_UART_RxCpltCallback+0x208>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d10a      	bne.n	80019ea <HAL_UART_RxCpltCallback+0x26>
		rx_buffer[interup_counter]=rx_tem_buffer[0];
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a7e      	ldr	r2, [pc, #504]	; (8001bd4 <HAL_UART_RxCpltCallback+0x210>)
 80019da:	7811      	ldrb	r1, [r2, #0]
 80019dc:	4a7e      	ldr	r2, [pc, #504]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 80019de:	54d1      	strb	r1, [r2, r3]
		interup_counter++;
 80019e0:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a7a      	ldr	r2, [pc, #488]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 80019e8:	6013      	str	r3, [r2, #0]
	}
		HAL_UART_Receive_IT(&huart2, rx_tem_buffer, 1);
 80019ea:	2201      	movs	r2, #1
 80019ec:	4979      	ldr	r1, [pc, #484]	; (8001bd4 <HAL_UART_RxCpltCallback+0x210>)
 80019ee:	4877      	ldr	r0, [pc, #476]	; (8001bcc <HAL_UART_RxCpltCallback+0x208>)
 80019f0:	f003 f989 	bl	8004d06 <HAL_UART_Receive_IT>
		if(rx_buffer[interup_counter-4]=='F'&&rx_buffer[interup_counter-3]=='F'&&rx_buffer[interup_counter-2]=='F'&&rx_buffer[interup_counter-1]=='F')
 80019f4:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b04      	subs	r3, #4
 80019fa:	4a77      	ldr	r2, [pc, #476]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	2b46      	cmp	r3, #70	; 0x46
 8001a00:	f040 8327 	bne.w	8002052 <HAL_UART_RxCpltCallback+0x68e>
 8001a04:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	4a73      	ldr	r2, [pc, #460]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	2b46      	cmp	r3, #70	; 0x46
 8001a10:	f040 831f 	bne.w	8002052 <HAL_UART_RxCpltCallback+0x68e>
 8001a14:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3b02      	subs	r3, #2
 8001a1a:	4a6f      	ldr	r2, [pc, #444]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	2b46      	cmp	r3, #70	; 0x46
 8001a20:	f040 8317 	bne.w	8002052 <HAL_UART_RxCpltCallback+0x68e>
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	2b46      	cmp	r3, #70	; 0x46
 8001a30:	f040 830f 	bne.w	8002052 <HAL_UART_RxCpltCallback+0x68e>
		{
			for_counter_1=0;
 8001a34:	4b69      	ldr	r3, [pc, #420]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
											for (int i=4;i<interup_counter;i++){
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3e:	e00d      	b.n	8001a5c <HAL_UART_RxCpltCallback+0x98>
												for_counter_1++;
 8001a40:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001a48:	6013      	str	r3, [r2, #0]
												if(rx_buffer[i]=='F'){
 8001a4a:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b46      	cmp	r3, #70	; 0x46
 8001a54:	d008      	beq.n	8001a68 <HAL_UART_RxCpltCallback+0xa4>
											for (int i=4;i<interup_counter;i++){
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3301      	adds	r3, #1
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5c:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbec      	blt.n	8001a40 <HAL_UART_RxCpltCallback+0x7c>
 8001a66:	e000      	b.n	8001a6a <HAL_UART_RxCpltCallback+0xa6>
													break;
 8001a68:	bf00      	nop
												}


											}
											for_counter_1=for_counter_1-1;
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a5a      	ldr	r2, [pc, #360]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001a72:	6013      	str	r3, [r2, #0]

											for(int i=0; i<for_counter_1; i++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
 8001a78:	e023      	b.n	8001ac2 <HAL_UART_RxCpltCallback+0xfe>
											rx_for_set[set_for_i_yeni_3]=rx_buffer[i+4];
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_UART_RxCpltCallback+0x214>)
 8001a80:	5cd2      	ldrb	r2, [r2, r3]
 8001a82:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_UART_RxCpltCallback+0x21c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_UART_RxCpltCallback+0x220>)
 8001a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
											rx_for_set_int[i]=0;
 8001a8e:	4a56      	ldr	r2, [pc, #344]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	2100      	movs	r1, #0
 8001a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
											rx_for_set_int[i]=atoi((char*)&rx_for_set[set_for_i_yeni_3]);
 8001a98:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <HAL_UART_RxCpltCallback+0x21c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <HAL_UART_RxCpltCallback+0x220>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 f8c8 	bl	8005c38 <atoi>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	494f      	ldr	r1, [pc, #316]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

											set_for_i_yeni_3++;
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_UART_RxCpltCallback+0x21c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_UART_RxCpltCallback+0x21c>)
 8001aba:	6013      	str	r3, [r2, #0]
											for(int i=0; i<for_counter_1; i++){
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	3301      	adds	r3, #1
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbd6      	blt.n	8001a7a <HAL_UART_RxCpltCallback+0xb6>
											}

												if(for_counter_1==1){
 8001acc:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d10a      	bne.n	8001aea <HAL_UART_RxCpltCallback+0x126>
												rx_for_set_integer=0;
 8001ad4:	4b45      	ldr	r3, [pc, #276]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[0];
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a41      	ldr	r2, [pc, #260]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e0f6      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x314>
												}
												else if (for_counter_1==2){
 8001aea:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d116      	bne.n	8001b20 <HAL_UART_RxCpltCallback+0x15c>
												rx_for_set_integer=0;
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[0]*10;
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a37      	ldr	r2, [pc, #220]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b0e:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[1];
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e0db      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x314>
												}
												else if (for_counter_1==3){
 8001b20:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d120      	bne.n	8001b6a <HAL_UART_RxCpltCallback+0x1a6>
												rx_for_set_integer=0;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[0]*100);
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2264      	movs	r2, #100	; 0x64
 8001b34:	fb03 f202 	mul.w	r2, r3, r2
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b40:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[1]*10);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b58:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[2];
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e0b6      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x314>
												}
												else if (for_counter_1==4){
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_UART_RxCpltCallback+0x218>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d13e      	bne.n	8001bf0 <HAL_UART_RxCpltCallback+0x22c>
												rx_for_set_integer=0;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[0]*1000);
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b80:	fb03 f202 	mul.w	r2, r3, r2
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b8c:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[1]*100);
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2264      	movs	r2, #100	; 0x64
 8001b94:	fb03 f202 	mul.w	r2, r3, r2
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001ba0:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[2]*10);
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001bb8:	6013      	str	r3, [r2, #0]

												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[3];
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_UART_RxCpltCallback+0x224>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_UART_RxCpltCallback+0x228>)
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e086      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x314>
 8001bca:	bf00      	nop
 8001bcc:	20000164 	.word	0x20000164
 8001bd0:	20000248 	.word	0x20000248
 8001bd4:	20000228 	.word	0x20000228
 8001bd8:	20000238 	.word	0x20000238
 8001bdc:	2000025c 	.word	0x2000025c
 8001be0:	20000260 	.word	0x20000260
 8001be4:	200001bc 	.word	0x200001bc
 8001be8:	20000264 	.word	0x20000264
 8001bec:	20000278 	.word	0x20000278

												}
												else if (for_counter_1==5){
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_UART_RxCpltCallback+0x460>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d136      	bne.n	8001c66 <HAL_UART_RxCpltCallback+0x2a2>
												rx_for_set_integer=0;
 8001bf8:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[0]*10000);
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c06:	fb03 f202 	mul.w	r2, r3, r2
 8001c0a:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a85      	ldr	r2, [pc, #532]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c12:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[1]*1000);
 8001c14:	4b85      	ldr	r3, [pc, #532]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1c:	fb03 f202 	mul.w	r2, r3, r2
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a80      	ldr	r2, [pc, #512]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c28:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[2]*100);
 8001c2a:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2264      	movs	r2, #100	; 0x64
 8001c30:	fb03 f202 	mul.w	r2, r3, r2
 8001c34:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a7b      	ldr	r2, [pc, #492]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c3c:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[3]*10);
 8001c3e:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a75      	ldr	r2, [pc, #468]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c54:	6013      	str	r3, [r2, #0]


												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[3];
 8001c56:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a71      	ldr	r2, [pc, #452]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e038      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x314>

												}
												else if (for_counter_1==6){
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_UART_RxCpltCallback+0x460>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d134      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x314>
												rx_for_set_integer=0;
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[0]*100000);
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6d      	ldr	r2, [pc, #436]	; (8001e30 <HAL_UART_RxCpltCallback+0x46c>)
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a68      	ldr	r2, [pc, #416]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c86:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[1]*10000);
 8001c88:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c90:	fb03 f202 	mul.w	r2, r3, r2
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a63      	ldr	r2, [pc, #396]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001c9c:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[2]*100);
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2264      	movs	r2, #100	; 0x64
 8001ca4:	fb03 f202 	mul.w	r2, r3, r2
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a5e      	ldr	r2, [pc, #376]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001cb0:	6013      	str	r3, [r2, #0]
												rx_for_set_integer=rx_for_set_integer+(rx_for_set_int[3]*10);
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001cc8:	6013      	str	r3, [r2, #0]


												rx_for_set_integer=rx_for_set_integer+rx_for_set_int[4];
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_UART_RxCpltCallback+0x468>)
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a54      	ldr	r2, [pc, #336]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001cd6:	6013      	str	r3, [r2, #0]

												}
			if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='E'&&rx_buffer[3]=='5')
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b38      	cmp	r3, #56	; 0x38
 8001cde:	d12c      	bne.n	8001d3a <HAL_UART_RxCpltCallback+0x376>
 8001ce0:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001ce2:	785b      	ldrb	r3, [r3, #1]
 8001ce4:	2b30      	cmp	r3, #48	; 0x30
 8001ce6:	d128      	bne.n	8001d3a <HAL_UART_RxCpltCallback+0x376>
 8001ce8:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	2b45      	cmp	r3, #69	; 0x45
 8001cee:	d124      	bne.n	8001d3a <HAL_UART_RxCpltCallback+0x376>
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	2b35      	cmp	r3, #53	; 0x35
 8001cf6:	d120      	bne.n	8001d3a <HAL_UART_RxCpltCallback+0x376>
			{




				for(int i=0;i<2;i++){
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfc:	e00e      	b.n	8001d1c <HAL_UART_RxCpltCallback+0x358>
					rx_step_x_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	3304      	adds	r3, #4
 8001d02:	4a4c      	ldr	r2, [pc, #304]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d04:	4413      	add	r3, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 ff96 	bl	8005c38 <atoi>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	494a      	ldr	r1, [pc, #296]	; (8001e38 <HAL_UART_RxCpltCallback+0x474>)
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int i=0;i<2;i++){
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	3301      	adds	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	dded      	ble.n	8001cfe <HAL_UART_RxCpltCallback+0x33a>

				}
				rx_step_x_angel=rx_step_x_int[0];
 8001d22:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_UART_RxCpltCallback+0x474>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <HAL_UART_RxCpltCallback+0x478>)
 8001d28:	6013      	str	r3, [r2, #0]
				setStepper_x(rx_for_set_integer,0,0);
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f82c 	bl	8000d90 <setStepper_x>
 8001d38:	e17a      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>
			}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='E'&&rx_buffer[3]=='4')
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b38      	cmp	r3, #56	; 0x38
 8001d40:	d12c      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x3d8>
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	2b30      	cmp	r3, #48	; 0x30
 8001d48:	d128      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x3d8>
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d4c:	789b      	ldrb	r3, [r3, #2]
 8001d4e:	2b45      	cmp	r3, #69	; 0x45
 8001d50:	d124      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x3d8>
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d54:	78db      	ldrb	r3, [r3, #3]
 8001d56:	2b34      	cmp	r3, #52	; 0x34
 8001d58:	d120      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x3d8>
						{
							for(int i=0;i<2;i++){
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5e:	e00e      	b.n	8001d7e <HAL_UART_RxCpltCallback+0x3ba>
								rx_step_x_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	3304      	adds	r3, #4
 8001d64:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d66:	4413      	add	r3, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 ff65 	bl	8005c38 <atoi>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4931      	ldr	r1, [pc, #196]	; (8001e38 <HAL_UART_RxCpltCallback+0x474>)
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	dded      	ble.n	8001d60 <HAL_UART_RxCpltCallback+0x39c>

							}
							rx_step_x_angel=rx_step_x_int[0];
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_UART_RxCpltCallback+0x474>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <HAL_UART_RxCpltCallback+0x478>)
 8001d8a:	6013      	str	r3, [r2, #0]
							setStepper_x(rx_for_set_integer,1,0);
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	2101      	movs	r1, #1
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fffb 	bl	8000d90 <setStepper_x>
 8001d9a:	e149      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='D'&&rx_buffer[3]=='5')
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b38      	cmp	r3, #56	; 0x38
 8001da2:	d12c      	bne.n	8001dfe <HAL_UART_RxCpltCallback+0x43a>
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b30      	cmp	r3, #48	; 0x30
 8001daa:	d128      	bne.n	8001dfe <HAL_UART_RxCpltCallback+0x43a>
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	2b44      	cmp	r3, #68	; 0x44
 8001db2:	d124      	bne.n	8001dfe <HAL_UART_RxCpltCallback+0x43a>
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001db6:	78db      	ldrb	r3, [r3, #3]
 8001db8:	2b35      	cmp	r3, #53	; 0x35
 8001dba:	d120      	bne.n	8001dfe <HAL_UART_RxCpltCallback+0x43a>
						{
							for(int i=0;i<2;i++){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	e00e      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x41c>
								rx_step_d_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 ff34 	bl	8005c38 <atoi>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	491b      	ldr	r1, [pc, #108]	; (8001e40 <HAL_UART_RxCpltCallback+0x47c>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	dded      	ble.n	8001dc2 <HAL_UART_RxCpltCallback+0x3fe>

							}
							rx_step_d_angel=rx_step_d_int[0];
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_UART_RxCpltCallback+0x47c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_UART_RxCpltCallback+0x480>)
 8001dec:	6013      	str	r3, [r2, #0]
							setStepper_d(rx_for_set_integer,0,0);
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_UART_RxCpltCallback+0x464>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fada 	bl	80013b0 <setStepper_d>
 8001dfc:	e118      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='D'&&rx_buffer[3]=='4')
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b38      	cmp	r3, #56	; 0x38
 8001e04:	d13e      	bne.n	8001e84 <HAL_UART_RxCpltCallback+0x4c0>
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b30      	cmp	r3, #48	; 0x30
 8001e0c:	d13a      	bne.n	8001e84 <HAL_UART_RxCpltCallback+0x4c0>
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	2b44      	cmp	r3, #68	; 0x44
 8001e14:	d136      	bne.n	8001e84 <HAL_UART_RxCpltCallback+0x4c0>
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_UART_RxCpltCallback+0x470>)
 8001e18:	78db      	ldrb	r3, [r3, #3]
 8001e1a:	2b34      	cmp	r3, #52	; 0x34
 8001e1c:	d132      	bne.n	8001e84 <HAL_UART_RxCpltCallback+0x4c0>
						{
							for(int i=0;i<2;i++){
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
 8001e22:	e020      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x4a2>
 8001e24:	2000025c 	.word	0x2000025c
 8001e28:	20000278 	.word	0x20000278
 8001e2c:	20000264 	.word	0x20000264
 8001e30:	000186a0 	.word	0x000186a0
 8001e34:	20000238 	.word	0x20000238
 8001e38:	2000024c 	.word	0x2000024c
 8001e3c:	20000254 	.word	0x20000254
 8001e40:	20000290 	.word	0x20000290
 8001e44:	20000280 	.word	0x20000280
								rx_step_d_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4a83      	ldr	r2, [pc, #524]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fef1 	bl	8005c38 <atoi>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4981      	ldr	r1, [pc, #516]	; (8002060 <HAL_UART_RxCpltCallback+0x69c>)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	3301      	adds	r3, #1
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	dded      	ble.n	8001e48 <HAL_UART_RxCpltCallback+0x484>

							}
							rx_step_d_angel=rx_step_d_int[0];
 8001e6c:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <HAL_UART_RxCpltCallback+0x69c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a7c      	ldr	r2, [pc, #496]	; (8002064 <HAL_UART_RxCpltCallback+0x6a0>)
 8001e72:	6013      	str	r3, [r2, #0]
							setStepper_d(rx_for_set_integer,1,0);
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <HAL_UART_RxCpltCallback+0x6a4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fa97 	bl	80013b0 <setStepper_d>
 8001e82:	e0d5      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='C'&&rx_buffer[3]=='5')
 8001e84:	4b75      	ldr	r3, [pc, #468]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b38      	cmp	r3, #56	; 0x38
 8001e8a:	d12c      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x522>
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b30      	cmp	r3, #48	; 0x30
 8001e92:	d128      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x522>
 8001e94:	4b71      	ldr	r3, [pc, #452]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	2b43      	cmp	r3, #67	; 0x43
 8001e9a:	d124      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x522>
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	2b35      	cmp	r3, #53	; 0x35
 8001ea2:	d120      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x522>
						{
							for(int i=0;i<2;i++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	e00e      	b.n	8001ec8 <HAL_UART_RxCpltCallback+0x504>
								rx_step_c_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	4a6b      	ldr	r2, [pc, #428]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fec0 	bl	8005c38 <atoi>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	496c      	ldr	r1, [pc, #432]	; (800206c <HAL_UART_RxCpltCallback+0x6a8>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	dded      	ble.n	8001eaa <HAL_UART_RxCpltCallback+0x4e6>

							}
							rx_step_c_angel=rx_step_c_int[0];
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_UART_RxCpltCallback+0x6a8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a67      	ldr	r2, [pc, #412]	; (8002070 <HAL_UART_RxCpltCallback+0x6ac>)
 8001ed4:	6013      	str	r3, [r2, #0]
							setStepper_c(rx_for_set_integer,0,0);
 8001ed6:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_UART_RxCpltCallback+0x6a4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fc12 	bl	8001708 <setStepper_c>
 8001ee4:	e0a4      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='C'&&rx_buffer[3]=='4')
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b38      	cmp	r3, #56	; 0x38
 8001eec:	d12c      	bne.n	8001f48 <HAL_UART_RxCpltCallback+0x584>
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	2b30      	cmp	r3, #48	; 0x30
 8001ef4:	d128      	bne.n	8001f48 <HAL_UART_RxCpltCallback+0x584>
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001ef8:	789b      	ldrb	r3, [r3, #2]
 8001efa:	2b43      	cmp	r3, #67	; 0x43
 8001efc:	d124      	bne.n	8001f48 <HAL_UART_RxCpltCallback+0x584>
 8001efe:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f00:	78db      	ldrb	r3, [r3, #3]
 8001f02:	2b34      	cmp	r3, #52	; 0x34
 8001f04:	d120      	bne.n	8001f48 <HAL_UART_RxCpltCallback+0x584>
						{
							for(int i=0;i<2;i++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e00e      	b.n	8001f2a <HAL_UART_RxCpltCallback+0x566>
								rx_step_c_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f12:	4413      	add	r3, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fe8f 	bl	8005c38 <atoi>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4953      	ldr	r1, [pc, #332]	; (800206c <HAL_UART_RxCpltCallback+0x6a8>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dded      	ble.n	8001f0c <HAL_UART_RxCpltCallback+0x548>

							}
							rx_step_c_angel=rx_step_c_int[0];
 8001f30:	4b4e      	ldr	r3, [pc, #312]	; (800206c <HAL_UART_RxCpltCallback+0x6a8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_UART_RxCpltCallback+0x6ac>)
 8001f36:	6013      	str	r3, [r2, #0]
							setStepper_c(rx_for_set_integer,1,0);
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_UART_RxCpltCallback+0x6a4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fbe1 	bl	8001708 <setStepper_c>
 8001f46:	e073      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='X'&&rx_buffer[3]=='5')
 8001f48:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b38      	cmp	r3, #56	; 0x38
 8001f4e:	d12c      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x5e6>
 8001f50:	4b42      	ldr	r3, [pc, #264]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	2b30      	cmp	r3, #48	; 0x30
 8001f56:	d128      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x5e6>
 8001f58:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f5a:	789b      	ldrb	r3, [r3, #2]
 8001f5c:	2b58      	cmp	r3, #88	; 0x58
 8001f5e:	d124      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x5e6>
 8001f60:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	2b35      	cmp	r3, #53	; 0x35
 8001f66:	d120      	bne.n	8001faa <HAL_UART_RxCpltCallback+0x5e6>
						{
							for(int i=0;i<2;i++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00e      	b.n	8001f8c <HAL_UART_RxCpltCallback+0x5c8>
								rx_step_e_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3304      	adds	r3, #4
 8001f72:	4a3a      	ldr	r2, [pc, #232]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001f74:	4413      	add	r3, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fe5e 	bl	8005c38 <atoi>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	493d      	ldr	r1, [pc, #244]	; (8002074 <HAL_UART_RxCpltCallback+0x6b0>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	dded      	ble.n	8001f6e <HAL_UART_RxCpltCallback+0x5aa>

							}
							rx_step_e_angel=rx_step_e_int[0];
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_UART_RxCpltCallback+0x6b0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a38      	ldr	r2, [pc, #224]	; (8002078 <HAL_UART_RxCpltCallback+0x6b4>)
 8001f98:	6013      	str	r3, [r2, #0]
							setStepper_e(rx_for_set_integer,0,0);
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_UART_RxCpltCallback+0x6a4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8bc 	bl	8001120 <setStepper_e>
 8001fa8:	e042      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='X'&&rx_buffer[3]=='4')
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b38      	cmp	r3, #56	; 0x38
 8001fb0:	d12c      	bne.n	800200c <HAL_UART_RxCpltCallback+0x648>
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	2b30      	cmp	r3, #48	; 0x30
 8001fb8:	d128      	bne.n	800200c <HAL_UART_RxCpltCallback+0x648>
 8001fba:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001fbc:	789b      	ldrb	r3, [r3, #2]
 8001fbe:	2b58      	cmp	r3, #88	; 0x58
 8001fc0:	d124      	bne.n	800200c <HAL_UART_RxCpltCallback+0x648>
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001fc4:	78db      	ldrb	r3, [r3, #3]
 8001fc6:	2b34      	cmp	r3, #52	; 0x34
 8001fc8:	d120      	bne.n	800200c <HAL_UART_RxCpltCallback+0x648>
						{
							for(int i=0;i<2;i++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e00e      	b.n	8001fee <HAL_UART_RxCpltCallback+0x62a>
								rx_step_e_int[i]=atoi((char*)&rx_buffer[i+4]);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 fe2d 	bl	8005c38 <atoi>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4924      	ldr	r1, [pc, #144]	; (8002074 <HAL_UART_RxCpltCallback+0x6b0>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for(int i=0;i<2;i++){
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	3301      	adds	r3, #1
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	dded      	ble.n	8001fd0 <HAL_UART_RxCpltCallback+0x60c>

							}
							rx_step_e_angel=rx_step_e_int[0];
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_UART_RxCpltCallback+0x6b0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <HAL_UART_RxCpltCallback+0x6b4>)
 8001ffa:	6013      	str	r3, [r2, #0]
							setStepper_e(rx_for_set_integer,1,0);
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_UART_RxCpltCallback+0x6a4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f88b 	bl	8001120 <setStepper_e>
 800200a:	e011      	b.n	8002030 <HAL_UART_RxCpltCallback+0x66c>

						}
			else if(rx_buffer[0]=='8'&&rx_buffer[1]=='0'&&rx_buffer[2]=='S'&&rx_buffer[3]=='4')
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b38      	cmp	r3, #56	; 0x38
 8002012:	d10d      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x66c>
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	2b30      	cmp	r3, #48	; 0x30
 800201a:	d109      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x66c>
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 800201e:	789b      	ldrb	r3, [r3, #2]
 8002020:	2b53      	cmp	r3, #83	; 0x53
 8002022:	d105      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x66c>
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8002026:	78db      	ldrb	r3, [r3, #3]
 8002028:	2b34      	cmp	r3, #52	; 0x34
 800202a:	d101      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x66c>
						{

							move_function();
 800202c:	f7fe fcf4 	bl	8000a18 <move_function>

						}
			for(int z=0;z<10;z++){
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e007      	b.n	8002046 <HAL_UART_RxCpltCallback+0x682>
				rx_buffer[z]=' ';
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_UART_RxCpltCallback+0x698>)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	2220      	movs	r2, #32
 800203e:	701a      	strb	r2, [r3, #0]
			for(int z=0;z<10;z++){
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b09      	cmp	r3, #9
 800204a:	ddf4      	ble.n	8002036 <HAL_UART_RxCpltCallback+0x672>
			}
			interup_counter=0;
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_UART_RxCpltCallback+0x6b8>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
		}

	}
 8002052:	bf00      	nop
 8002054:	3738      	adds	r7, #56	; 0x38
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000238 	.word	0x20000238
 8002060:	20000290 	.word	0x20000290
 8002064:	20000280 	.word	0x20000280
 8002068:	20000278 	.word	0x20000278
 800206c:	20000298 	.word	0x20000298
 8002070:	20000284 	.word	0x20000284
 8002074:	20000288 	.word	0x20000288
 8002078:	2000027c 	.word	0x2000027c
 800207c:	20000248 	.word	0x20000248

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002086:	f000 fe51 	bl	8002d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208a:	f000 f99b 	bl	80023c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208e:	f000 fb4f 	bl	8002730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002092:	f000 faf9 	bl	8002688 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002096:	f000 f9fd 	bl	8002494 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800209a:	f000 fb1f 	bl	80026dc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800209e:	f000 fa99 	bl	80025d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80020a2:	48b7      	ldr	r0, [pc, #732]	; (8002380 <main+0x300>)
 80020a4:	f001 fece 	bl	8003e44 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, rx_tem_buffer, 1);
 80020a8:	2201      	movs	r2, #1
 80020aa:	49b6      	ldr	r1, [pc, #728]	; (8002384 <main+0x304>)
 80020ac:	48b6      	ldr	r0, [pc, #728]	; (8002388 <main+0x308>)
 80020ae:	f002 fe2a 	bl	8004d06 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020b2:	2100      	movs	r1, #0
 80020b4:	48b5      	ldr	r0, [pc, #724]	; (800238c <main+0x30c>)
 80020b6:	f001 ff7d 	bl	8003fb4 <HAL_TIM_PWM_Start>
  // MOTOR E HOME

  for(int i=0;i<5000;i++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e045      	b.n	800214c <main+0xcc>
	  HAL_GPIO_WritePin(GPIOC,dir_e_Pin,GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2120      	movs	r1, #32
 80020c4:	48b2      	ldr	r0, [pc, #712]	; (8002390 <main+0x310>)
 80020c6:	f001 f9fb 	bl	80034c0 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(e_limit_GPIO_Port,e_limit_Pin)){
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	48b1      	ldr	r0, [pc, #708]	; (8002394 <main+0x314>)
 80020ce:	f001 f9df 	bl	8003490 <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d024      	beq.n	8002122 <main+0xa2>
		  current_angel_e=0;
 80020d8:	4baf      	ldr	r3, [pc, #700]	; (8002398 <main+0x318>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
		  for (int i=0;i<50;i++){
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e019      	b.n	800211a <main+0x9a>
			  HAL_GPIO_WritePin(GPIOC,dir_e_Pin,GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2120      	movs	r1, #32
 80020ea:	48a9      	ldr	r0, [pc, #676]	; (8002390 <main+0x310>)
 80020ec:	f001 f9e8 	bl	80034c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC,step_e_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2110      	movs	r1, #16
 80020f4:	48a6      	ldr	r0, [pc, #664]	; (8002390 <main+0x310>)
 80020f6:	f001 f9e3 	bl	80034c0 <HAL_GPIO_WritePin>
			  delay_us(3000);
 80020fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020fe:	f7fe fc4d 	bl	800099c <delay_us>
			  HAL_GPIO_WritePin(GPIOC,step_e_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2110      	movs	r1, #16
 8002106:	48a2      	ldr	r0, [pc, #648]	; (8002390 <main+0x310>)
 8002108:	f001 f9da 	bl	80034c0 <HAL_GPIO_WritePin>
			  delay_us(3000);
 800210c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002110:	f7fe fc44 	bl	800099c <delay_us>
		  for (int i=0;i<50;i++){
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	3301      	adds	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b31      	cmp	r3, #49	; 0x31
 800211e:	dde2      	ble.n	80020e6 <main+0x66>


		  }
		  break;
 8002120:	e019      	b.n	8002156 <main+0xd6>

		  }


	  HAL_GPIO_WritePin(GPIOC,step_e_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2110      	movs	r1, #16
 8002126:	489a      	ldr	r0, [pc, #616]	; (8002390 <main+0x310>)
 8002128:	f001 f9ca 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(3000);
 800212c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002130:	f7fe fc34 	bl	800099c <delay_us>
	  HAL_GPIO_WritePin(GPIOC,step_e_Pin, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2110      	movs	r1, #16
 8002138:	4895      	ldr	r0, [pc, #596]	; (8002390 <main+0x310>)
 800213a:	f001 f9c1 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(3000);
 800213e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002142:	f7fe fc2b 	bl	800099c <delay_us>
  for(int i=0;i<5000;i++){
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002152:	4293      	cmp	r3, r2
 8002154:	ddb4      	ble.n	80020c0 <main+0x40>
  }
  //motor 1home function
  for(int i=0;i<5000;i++){
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e045      	b.n	80021e8 <main+0x168>
	  HAL_GPIO_WritePin(GPIOA,dir_x_Pin,GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2104      	movs	r1, #4
 8002160:	488e      	ldr	r0, [pc, #568]	; (800239c <main+0x31c>)
 8002162:	f001 f9ad 	bl	80034c0 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(x_limit_GPIO_Port,x_limit_Pin)){
 8002166:	2101      	movs	r1, #1
 8002168:	488d      	ldr	r0, [pc, #564]	; (80023a0 <main+0x320>)
 800216a:	f001 f991 	bl	8003490 <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d024      	beq.n	80021be <main+0x13e>
		  current_angel_x=0;
 8002174:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <main+0x324>)
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
		  for (int i=0;i<50;i++){
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e019      	b.n	80021b6 <main+0x136>
			  HAL_GPIO_WritePin(GPIOA,dir_x_Pin,GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2104      	movs	r1, #4
 8002186:	4885      	ldr	r0, [pc, #532]	; (800239c <main+0x31c>)
 8002188:	f001 f99a 	bl	80034c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,step_x_Pin, GPIO_PIN_SET);
 800218c:	2201      	movs	r2, #1
 800218e:	2102      	movs	r1, #2
 8002190:	4882      	ldr	r0, [pc, #520]	; (800239c <main+0x31c>)
 8002192:	f001 f995 	bl	80034c0 <HAL_GPIO_WritePin>
			  delay_us(3000);
 8002196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800219a:	f7fe fbff 	bl	800099c <delay_us>
			  HAL_GPIO_WritePin(GPIOA,step_x_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2102      	movs	r1, #2
 80021a2:	487e      	ldr	r0, [pc, #504]	; (800239c <main+0x31c>)
 80021a4:	f001 f98c 	bl	80034c0 <HAL_GPIO_WritePin>
			  delay_us(3000);
 80021a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021ac:	f7fe fbf6 	bl	800099c <delay_us>
		  for (int i=0;i<50;i++){
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	3301      	adds	r3, #1
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b31      	cmp	r3, #49	; 0x31
 80021ba:	dde2      	ble.n	8002182 <main+0x102>


		  }
		  break;
 80021bc:	e019      	b.n	80021f2 <main+0x172>

	  }
	  HAL_GPIO_WritePin(GPIOA,step_x_Pin, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	2102      	movs	r1, #2
 80021c2:	4876      	ldr	r0, [pc, #472]	; (800239c <main+0x31c>)
 80021c4:	f001 f97c 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(3000);
 80021c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021cc:	f7fe fbe6 	bl	800099c <delay_us>
	  HAL_GPIO_WritePin(GPIOA,step_x_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2102      	movs	r1, #2
 80021d4:	4871      	ldr	r0, [pc, #452]	; (800239c <main+0x31c>)
 80021d6:	f001 f973 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(3000);
 80021da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021de:	f7fe fbdd 	bl	800099c <delay_us>
  for(int i=0;i<5000;i++){
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80021ee:	4293      	cmp	r3, r2
 80021f0:	ddb4      	ble.n	800215c <main+0xdc>
	}
	 //MOTOR_D HOME
  for(int i=0;i<5000;i++){
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e044      	b.n	8002282 <main+0x202>
	  HAL_GPIO_WritePin(GPIOA,dir_d_Pin,GPIO_PIN_SET);
 80021f8:	2201      	movs	r2, #1
 80021fa:	2120      	movs	r1, #32
 80021fc:	4867      	ldr	r0, [pc, #412]	; (800239c <main+0x31c>)
 80021fe:	f001 f95f 	bl	80034c0 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(d_limit_GPIO_Port,d_limit_Pin)){
 8002202:	2102      	movs	r1, #2
 8002204:	4866      	ldr	r0, [pc, #408]	; (80023a0 <main+0x320>)
 8002206:	f001 f943 	bl	8003490 <HAL_GPIO_ReadPin>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d023      	beq.n	8002258 <main+0x1d8>
		  current_angel_d=0;
 8002210:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <main+0x328>)
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

			  while(HAL_GPIO_ReadPin(d_limit_GPIO_Port,d_limit_Pin)){
 8002218:	e016      	b.n	8002248 <main+0x1c8>
				  HAL_GPIO_WritePin(GPIOA,step_d_Pin, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	2110      	movs	r1, #16
 800221e:	485f      	ldr	r0, [pc, #380]	; (800239c <main+0x31c>)
 8002220:	f001 f94e 	bl	80034c0 <HAL_GPIO_WritePin>
				  delay_us(600);
 8002224:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002228:	f7fe fbb8 	bl	800099c <delay_us>
				  HAL_GPIO_WritePin(GPIOA,step_d_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	2110      	movs	r1, #16
 8002230:	485a      	ldr	r0, [pc, #360]	; (800239c <main+0x31c>)
 8002232:	f001 f945 	bl	80034c0 <HAL_GPIO_WritePin>
				  delay_us(600);
 8002236:	f44f 7016 	mov.w	r0, #600	; 0x258
 800223a:	f7fe fbaf 	bl	800099c <delay_us>


			  HAL_GPIO_WritePin(GPIOA,dir_d_Pin,GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2120      	movs	r1, #32
 8002242:	4856      	ldr	r0, [pc, #344]	; (800239c <main+0x31c>)
 8002244:	f001 f93c 	bl	80034c0 <HAL_GPIO_WritePin>
			  while(HAL_GPIO_ReadPin(d_limit_GPIO_Port,d_limit_Pin)){
 8002248:	2102      	movs	r1, #2
 800224a:	4855      	ldr	r0, [pc, #340]	; (80023a0 <main+0x320>)
 800224c:	f001 f920 	bl	8003490 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e1      	bne.n	800221a <main+0x19a>


		  }
		  break;
 8002256:	e019      	b.n	800228c <main+0x20c>

		  }


	  HAL_GPIO_WritePin(GPIOA,step_d_Pin, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2110      	movs	r1, #16
 800225c:	484f      	ldr	r0, [pc, #316]	; (800239c <main+0x31c>)
 800225e:	f001 f92f 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(800);
 8002262:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002266:	f7fe fb99 	bl	800099c <delay_us>
	  HAL_GPIO_WritePin(GPIOA,step_d_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	484b      	ldr	r0, [pc, #300]	; (800239c <main+0x31c>)
 8002270:	f001 f926 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(800);
 8002274:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002278:	f7fe fb90 	bl	800099c <delay_us>
  for(int i=0;i<5000;i++){
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f241 3287 	movw	r2, #4999	; 0x1387
 8002288:	4293      	cmp	r3, r2
 800228a:	ddb5      	ble.n	80021f8 <main+0x178>
  }

  //MOTOR C HOME
  for(int i=0;i<5000;i++){
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	e045      	b.n	800231e <main+0x29e>
	  HAL_GPIO_WritePin(GPIOA,dir_c_Pin,GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	4841      	ldr	r0, [pc, #260]	; (800239c <main+0x31c>)
 8002298:	f001 f912 	bl	80034c0 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(c_limit_GPIO_Port,c_limit_Pin)){
 800229c:	2104      	movs	r1, #4
 800229e:	4840      	ldr	r0, [pc, #256]	; (80023a0 <main+0x320>)
 80022a0:	f001 f8f6 	bl	8003490 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d024      	beq.n	80022f4 <main+0x274>
		  current_angel_c=0;
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <main+0x32c>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
		  for (int i=0;i<10;i++){
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	e019      	b.n	80022ec <main+0x26c>
			  HAL_GPIO_WritePin(GPIOA,dir_c_Pin,GPIO_PIN_SET);
 80022b8:	2201      	movs	r2, #1
 80022ba:	2140      	movs	r1, #64	; 0x40
 80022bc:	4837      	ldr	r0, [pc, #220]	; (800239c <main+0x31c>)
 80022be:	f001 f8ff 	bl	80034c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,step_c_Pin, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	4835      	ldr	r0, [pc, #212]	; (800239c <main+0x31c>)
 80022c8:	f001 f8fa 	bl	80034c0 <HAL_GPIO_WritePin>
			  delay_us(600);
 80022cc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022d0:	f7fe fb64 	bl	800099c <delay_us>
			  HAL_GPIO_WritePin(GPIOA,step_c_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	4830      	ldr	r0, [pc, #192]	; (800239c <main+0x31c>)
 80022da:	f001 f8f1 	bl	80034c0 <HAL_GPIO_WritePin>
			  delay_us(600);
 80022de:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022e2:	f7fe fb5b 	bl	800099c <delay_us>
		  for (int i=0;i<10;i++){
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3301      	adds	r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	dde2      	ble.n	80022b8 <main+0x238>


		  }
		  break;
 80022f2:	e019      	b.n	8002328 <main+0x2a8>

		  }


	  HAL_GPIO_WritePin(GPIOA,step_c_Pin, GPIO_PIN_SET);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	4828      	ldr	r0, [pc, #160]	; (800239c <main+0x31c>)
 80022fa:	f001 f8e1 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(600);
 80022fe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002302:	f7fe fb4b 	bl	800099c <delay_us>
	  HAL_GPIO_WritePin(GPIOA,step_c_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <main+0x31c>)
 800230c:	f001 f8d8 	bl	80034c0 <HAL_GPIO_WritePin>
	  delay_us(600);
 8002310:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002314:	f7fe fb42 	bl	800099c <delay_us>
  for(int i=0;i<5000;i++){
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f241 3287 	movw	r2, #4999	; 0x1387
 8002324:	4293      	cmp	r3, r2
 8002326:	ddb4      	ble.n	8002292 <main+0x212>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8002328:	2120      	movs	r1, #32
 800232a:	481a      	ldr	r0, [pc, #104]	; (8002394 <main+0x314>)
 800232c:	f001 f8b0 	bl	8003490 <HAL_GPIO_ReadPin>
	  switch_konum_x=HAL_GPIO_ReadPin(x_limit_GPIO_Port, x_limit_Pin);
 8002330:	2101      	movs	r1, #1
 8002332:	481b      	ldr	r0, [pc, #108]	; (80023a0 <main+0x320>)
 8002334:	f001 f8ac 	bl	8003490 <HAL_GPIO_ReadPin>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <main+0x330>)
 800233e:	601a      	str	r2, [r3, #0]
	  switch_konum_d=HAL_GPIO_ReadPin(d_limit_GPIO_Port, d_limit_Pin);
 8002340:	2102      	movs	r1, #2
 8002342:	4817      	ldr	r0, [pc, #92]	; (80023a0 <main+0x320>)
 8002344:	f001 f8a4 	bl	8003490 <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <main+0x334>)
 800234e:	601a      	str	r2, [r3, #0]
	  switch_konum_c=HAL_GPIO_ReadPin(c_limit_GPIO_Port,c_limit_Pin);
 8002350:	2104      	movs	r1, #4
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <main+0x320>)
 8002354:	f001 f89c 	bl	8003490 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <main+0x338>)
 800235e:	601a      	str	r2, [r3, #0]
	  switch_konum_e=HAL_GPIO_ReadPin(e_limit_GPIO_Port, e_limit_Pin);
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <main+0x314>)
 8002364:	f001 f894 	bl	8003490 <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <main+0x33c>)
 800236e:	601a      	str	r2, [r3, #0]





	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002376:	4812      	ldr	r0, [pc, #72]	; (80023c0 <main+0x340>)
 8002378:	f001 f8a2 	bl	80034c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 800237c:	e7d4      	b.n	8002328 <main+0x2a8>
 800237e:	bf00      	nop
 8002380:	20000090 	.word	0x20000090
 8002384:	20000228 	.word	0x20000228
 8002388:	20000164 	.word	0x20000164
 800238c:	200000d8 	.word	0x200000d8
 8002390:	40020800 	.word	0x40020800
 8002394:	40021000 	.word	0x40021000
 8002398:	200001fc 	.word	0x200001fc
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	200001f8 	.word	0x200001f8
 80023a8:	20000204 	.word	0x20000204
 80023ac:	20000200 	.word	0x20000200
 80023b0:	200002a0 	.word	0x200002a0
 80023b4:	200002a4 	.word	0x200002a4
 80023b8:	200002a8 	.word	0x200002a8
 80023bc:	200002ac 	.word	0x200002ac
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b094      	sub	sp, #80	; 0x50
 80023c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ca:	f107 0320 	add.w	r3, r7, #32
 80023ce:	2230      	movs	r2, #48	; 0x30
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fc5e 	bl	8005c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <SystemClock_Config+0xc8>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <SystemClock_Config+0xc8>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6413      	str	r3, [r2, #64]	; 0x40
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <SystemClock_Config+0xc8>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <SystemClock_Config+0xcc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <SystemClock_Config+0xcc>)
 800240e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <SystemClock_Config+0xcc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002420:	2302      	movs	r3, #2
 8002422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002424:	2301      	movs	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002428:	2310      	movs	r3, #16
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800242c:	2302      	movs	r3, #2
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002434:	2308      	movs	r3, #8
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002438:	2348      	movs	r3, #72	; 0x48
 800243a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800243c:	2302      	movs	r3, #2
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002440:	2304      	movs	r3, #4
 8002442:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002444:	f107 0320 	add.w	r3, r7, #32
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f853 	bl	80034f4 <HAL_RCC_OscConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002454:	f000 fa3a 	bl	80028cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002458:	230f      	movs	r3, #15
 800245a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002468:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fab5 	bl	80039e4 <HAL_RCC_ClockConfig>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002480:	f000 fa24 	bl	80028cc <Error_Handler>
  }
}
 8002484:	bf00      	nop
 8002486:	3750      	adds	r7, #80	; 0x50
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000

08002494 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b096      	sub	sp, #88	; 0x58
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2220      	movs	r2, #32
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fbe1 	bl	8005c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <MX_TIM1_Init+0x138>)
 80024d4:	4a3e      	ldr	r2, [pc, #248]	; (80025d0 <MX_TIM1_Init+0x13c>)
 80024d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <MX_TIM1_Init+0x138>)
 80024da:	2247      	movs	r2, #71	; 0x47
 80024dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <MX_TIM1_Init+0x138>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <MX_TIM1_Init+0x138>)
 80024e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b37      	ldr	r3, [pc, #220]	; (80025cc <MX_TIM1_Init+0x138>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <MX_TIM1_Init+0x138>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <MX_TIM1_Init+0x138>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024fe:	4833      	ldr	r0, [pc, #204]	; (80025cc <MX_TIM1_Init+0x138>)
 8002500:	f001 fc50 	bl	8003da4 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800250a:	f000 f9df 	bl	80028cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002514:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002518:	4619      	mov	r1, r3
 800251a:	482c      	ldr	r0, [pc, #176]	; (80025cc <MX_TIM1_Init+0x138>)
 800251c:	f001 fe6e 	bl	80041fc <HAL_TIM_ConfigClockSource>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002526:	f000 f9d1 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800252a:	4828      	ldr	r0, [pc, #160]	; (80025cc <MX_TIM1_Init+0x138>)
 800252c:	f001 fcf2 	bl	8003f14 <HAL_TIM_OC_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002536:	f000 f9c9 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002546:	4619      	mov	r1, r3
 8002548:	4820      	ldr	r0, [pc, #128]	; (80025cc <MX_TIM1_Init+0x138>)
 800254a:	f002 fa2f 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002554:	f000 f9ba 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002560:	2300      	movs	r3, #0
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	4813      	ldr	r0, [pc, #76]	; (80025cc <MX_TIM1_Init+0x138>)
 800257e:	f001 fde1 	bl	8004144 <HAL_TIM_OC_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002588:	f000 f9a0 	bl	80028cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <MX_TIM1_Init+0x138>)
 80025b0:	f002 fa78 	bl	8004aa4 <HAL_TIMEx_ConfigBreakDeadTime>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80025ba:	f000 f987 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <MX_TIM1_Init+0x138>)
 80025c0:	f000 f9f6 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 80025c4:	bf00      	nop
 80025c6:	3758      	adds	r7, #88	; 0x58
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000090 	.word	0x20000090
 80025d0:	40010000 	.word	0x40010000

080025d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MX_TIM4_Init+0xac>)
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <MX_TIM4_Init+0xb0>)
 80025fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <MX_TIM4_Init+0xac>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <MX_TIM4_Init+0xac>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MX_TIM4_Init+0xac>)
 800260a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_TIM4_Init+0xac>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <MX_TIM4_Init+0xac>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800261c:	4818      	ldr	r0, [pc, #96]	; (8002680 <MX_TIM4_Init+0xac>)
 800261e:	f001 fc79 	bl	8003f14 <HAL_TIM_OC_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002628:	f000 f950 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002634:	f107 0320 	add.w	r3, r7, #32
 8002638:	4619      	mov	r1, r3
 800263a:	4811      	ldr	r0, [pc, #68]	; (8002680 <MX_TIM4_Init+0xac>)
 800263c:	f002 f9b6 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002646:	f000 f941 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2200      	movs	r2, #0
 800265e:	4619      	mov	r1, r3
 8002660:	4807      	ldr	r0, [pc, #28]	; (8002680 <MX_TIM4_Init+0xac>)
 8002662:	f001 fd6f 	bl	8004144 <HAL_TIM_OC_ConfigChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800266c:	f000 f92e 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <MX_TIM4_Init+0xac>)
 8002672:	f000 f99d 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	; 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200000d8 	.word	0x200000d8
 8002684:	40000800 	.word	0x40000800

08002688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <MX_USART1_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f002 fa42 	bl	8004b48 <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ca:	f000 f8ff 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000120 	.word	0x20000120
 80026d8:	40011000 	.word	0x40011000

080026dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <MX_USART2_UART_Init+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_USART2_UART_Init+0x4c>)
 8002714:	f002 fa18 	bl	8004b48 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800271e:	f000 f8d5 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000164 	.word	0x20000164
 800272c:	40004400 	.word	0x40004400

08002730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <MX_GPIO_Init+0x184>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a59      	ldr	r2, [pc, #356]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b57      	ldr	r3, [pc, #348]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <MX_GPIO_Init+0x184>)
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <MX_GPIO_Init+0x184>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b45      	ldr	r3, [pc, #276]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a44      	ldr	r2, [pc, #272]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a36      	ldr	r2, [pc, #216]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <MX_GPIO_Init+0x184>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_x_Pin|dir_x_Pin|step_d_Pin|dir_d_Pin
 80027ee:	2200      	movs	r2, #0
 80027f0:	21f6      	movs	r1, #246	; 0xf6
 80027f2:	4831      	ldr	r0, [pc, #196]	; (80028b8 <MX_GPIO_Init+0x188>)
 80027f4:	f000 fe64 	bl	80034c0 <HAL_GPIO_WritePin>
                          |dir_c_Pin|step_c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, step_e_Pin|dir_e_Pin, GPIO_PIN_RESET);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2130      	movs	r1, #48	; 0x30
 80027fc:	482f      	ldr	r0, [pc, #188]	; (80028bc <MX_GPIO_Init+0x18c>)
 80027fe:	f000 fe5f 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|led_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002808:	482d      	ldr	r0, [pc, #180]	; (80028c0 <MX_GPIO_Init+0x190>)
 800280a:	f000 fe59 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 e_limit_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|e_limit_Pin;
 800280e:	23a0      	movs	r3, #160	; 0xa0
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	4828      	ldr	r0, [pc, #160]	; (80028c4 <MX_GPIO_Init+0x194>)
 8002822:	f000 fc99 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002826:	2301      	movs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	481f      	ldr	r0, [pc, #124]	; (80028b8 <MX_GPIO_Init+0x188>)
 800283a:	f000 fc8d 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : step_x_Pin dir_x_Pin step_d_Pin dir_d_Pin
                           dir_c_Pin step_c_Pin */
  GPIO_InitStruct.Pin = step_x_Pin|dir_x_Pin|step_d_Pin|dir_d_Pin
 800283e:	23f6      	movs	r3, #246	; 0xf6
 8002840:	61fb      	str	r3, [r7, #28]
                          |dir_c_Pin|step_c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002842:	2301      	movs	r3, #1
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	4818      	ldr	r0, [pc, #96]	; (80028b8 <MX_GPIO_Init+0x188>)
 8002856:	f000 fc7f 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : step_e_Pin dir_e_Pin */
  GPIO_InitStruct.Pin = step_e_Pin|dir_e_Pin;
 800285a:	2330      	movs	r3, #48	; 0x30
 800285c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285e:	2301      	movs	r3, #1
 8002860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4812      	ldr	r0, [pc, #72]	; (80028bc <MX_GPIO_Init+0x18c>)
 8002872:	f000 fc71 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : x_limit_Pin d_limit_Pin c_limit_Pin */
  GPIO_InitStruct.Pin = x_limit_Pin|d_limit_Pin|c_limit_Pin;
 8002876:	2307      	movs	r3, #7
 8002878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	480f      	ldr	r0, [pc, #60]	; (80028c8 <MX_GPIO_Init+0x198>)
 800288a:	f000 fc65 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 led_Pin PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|led_Pin|GPIO_PIN_14;
 800288e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002894:	2301      	movs	r3, #1
 8002896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4619      	mov	r1, r3
 80028a6:	4806      	ldr	r0, [pc, #24]	; (80028c0 <MX_GPIO_Init+0x190>)
 80028a8:	f000 fc56 	bl	8003158 <HAL_GPIO_Init>

}
 80028ac:	bf00      	nop
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40020400 	.word	0x40020400

080028cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <Error_Handler+0x8>
	...

080028d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_MspInit+0x4c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_MspInit+0x4c>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_MspInit+0x4c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_MspInit+0x4c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_MspInit+0x4c>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_MspInit+0x4c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <HAL_TIM_Base_MspInit+0x3c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10d      	bne.n	8002956 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_TIM_Base_MspInit+0x40>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_TIM_Base_MspInit+0x40>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_TIM_Base_MspInit+0x40>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40023800 	.word	0x40023800

0800296c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_TIM_OC_MspInit+0x3c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10d      	bne.n	800299a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_TIM_OC_MspInit+0x40>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_TIM_OC_MspInit+0x40>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_TIM_OC_MspInit+0x40>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d11f      	bne.n	8002a12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_TIM_MspPostInit+0xb4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_TIM_MspPostInit+0xb4>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_TIM_MspPostInit+0xb4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4817      	ldr	r0, [pc, #92]	; (8002a68 <HAL_TIM_MspPostInit+0xb8>)
 8002a0c:	f000 fba4 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a10:	e022      	b.n	8002a58 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_TIM_MspPostInit+0xbc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d11d      	bne.n	8002a58 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_TIM_MspPostInit+0xb4>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <HAL_TIM_MspPostInit+0xb4>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_TIM_MspPostInit+0xb4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a38:	2340      	movs	r3, #64	; 0x40
 8002a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4619      	mov	r1, r3
 8002a52:	4807      	ldr	r0, [pc, #28]	; (8002a70 <HAL_TIM_MspPostInit+0xc0>)
 8002a54:	f000 fb80 	bl	8003158 <HAL_GPIO_Init>
}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40010000 	.word	0x40010000
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40020400 	.word	0x40020400

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <HAL_UART_MspInit+0x144>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d135      	bne.n	8002b02 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ae0:	2307      	movs	r3, #7
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4835      	ldr	r0, [pc, #212]	; (8002bc0 <HAL_UART_MspInit+0x14c>)
 8002aec:	f000 fb34 	bl	8003158 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2025      	movs	r0, #37	; 0x25
 8002af6:	f000 fa66 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002afa:	2025      	movs	r0, #37	; 0x25
 8002afc:	f000 fa7f 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b00:	e056      	b.n	8002bb0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <HAL_UART_MspInit+0x150>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d151      	bne.n	8002bb0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6313      	str	r3, [r2, #48]	; 0x30
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6313      	str	r3, [r2, #48]	; 0x30
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_UART_MspInit+0x148>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b60:	2308      	movs	r3, #8
 8002b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b70:	2307      	movs	r3, #7
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <HAL_UART_MspInit+0x14c>)
 8002b7c:	f000 faec 	bl	8003158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b80:	2320      	movs	r3, #32
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b90:	2307      	movs	r3, #7
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <HAL_UART_MspInit+0x154>)
 8002b9c:	f000 fadc 	bl	8003158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2026      	movs	r0, #38	; 0x26
 8002ba6:	f000 fa0e 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002baa:	2026      	movs	r0, #38	; 0x26
 8002bac:	f000 fa27 	bl	8002ffe <HAL_NVIC_EnableIRQ>
}
 8002bb0:	bf00      	nop
 8002bb2:	3730      	adds	r7, #48	; 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	40020c00 	.word	0x40020c00

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HardFault_Handler+0x4>

08002bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c18:	f000 f8da 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <USART1_IRQHandler+0x10>)
 8002c26:	f002 f89f 	bl	8004d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000120 	.word	0x20000120

08002c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <USART2_IRQHandler+0x10>)
 8002c3a:	f002 f895 	bl	8004d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000164 	.word	0x20000164

08002c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <_sbrk+0x5c>)
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <_sbrk+0x60>)
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <_sbrk+0x64>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <_sbrk+0x68>)
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d207      	bcs.n	8002c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c78:	f002 ffe2 	bl	8005c40 <__errno>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	220c      	movs	r2, #12
 8002c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	e009      	b.n	8002c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <_sbrk+0x64>)
 8002c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20020000 	.word	0x20020000
 8002ca8:	00000400 	.word	0x00000400
 8002cac:	200002b0 	.word	0x200002b0
 8002cb0:	200002c8 	.word	0x200002c8

08002cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <SystemInit+0x20>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <SystemInit+0x20>)
 8002cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cdc:	480d      	ldr	r0, [pc, #52]	; (8002d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cde:	490e      	ldr	r1, [pc, #56]	; (8002d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce4:	e002      	b.n	8002cec <LoopCopyDataInit>

08002ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cea:	3304      	adds	r3, #4

08002cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf0:	d3f9      	bcc.n	8002ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cf4:	4c0b      	ldr	r4, [pc, #44]	; (8002d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf8:	e001      	b.n	8002cfe <LoopFillZerobss>

08002cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cfc:	3204      	adds	r2, #4

08002cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d00:	d3fb      	bcc.n	8002cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d02:	f7ff ffd7 	bl	8002cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d06:	f002 ffa1 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d0a:	f7ff f9b9 	bl	8002080 <main>
  bx  lr    
 8002d0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002d1c:	08006848 	.word	0x08006848
  ldr r2, =_sbss
 8002d20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002d24:	200002c8 	.word	0x200002c8

08002d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d28:	e7fe      	b.n	8002d28 <ADC_IRQHandler>
	...

08002d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <HAL_Init+0x40>)
 8002d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_Init+0x40>)
 8002d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_Init+0x40>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f000 f92b 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5a:	200f      	movs	r0, #15
 8002d5c:	f000 f808 	bl	8002d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d60:	f7ff fdba 	bl	80028d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023c00 	.word	0x40023c00

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x54>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_InitTick+0x58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f943 	bl	800301a <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00e      	b.n	8002dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d80a      	bhi.n	8002dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da4:	2200      	movs	r2, #0
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f000 f90b 	bl	8002fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db0:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_InitTick+0x5c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000008 	.word	0x20000008

08002dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x20>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_IncTick+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_IncTick+0x24>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	200002b4 	.word	0x200002b4

08002df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_GetTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	200002b4 	.word	0x200002b4

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f7c:	d301      	bcc.n	8002f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00f      	b.n	8002fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <SysTick_Config+0x40>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f7ff ff8e 	bl	8002eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <SysTick_Config+0x40>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <SysTick_Config+0x40>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	e000e010 	.word	0xe000e010

08002fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff29 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd8:	f7ff ff3e 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7ff ff8e 	bl	8002f04 <NVIC_EncodePriority>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff5d 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff31 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ffa2 	bl	8002f6c <SysTick_Config>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff feda 	bl	8002df8 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d008      	beq.n	8003064 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e052      	b.n	800310a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0216 	bic.w	r2, r2, #22
 8003072:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003082:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_DMA_Abort+0x62>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0208 	bic.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b4:	e013      	b.n	80030de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b6:	f7ff fe9f 	bl	8002df8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d90c      	bls.n	80030de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e015      	b.n	800310a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e4      	bne.n	80030b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	223f      	movs	r2, #63	; 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d004      	beq.n	8003130 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e00c      	b.n	800314a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2205      	movs	r2, #5
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e16b      	b.n	800344c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 815a 	bne.w	8003446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d005      	beq.n	80031aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d130      	bne.n	800320c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e0:	2201      	movs	r2, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0201 	and.w	r2, r3, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b03      	cmp	r3, #3
 8003216:	d017      	beq.n	8003248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	69b9      	ldr	r1, [r7, #24]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80b4 	beq.w	8003446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b60      	ldr	r3, [pc, #384]	; (8003464 <HAL_GPIO_Init+0x30c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a5f      	ldr	r2, [pc, #380]	; (8003464 <HAL_GPIO_Init+0x30c>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b5d      	ldr	r3, [pc, #372]	; (8003464 <HAL_GPIO_Init+0x30c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fa:	4a5b      	ldr	r2, [pc, #364]	; (8003468 <HAL_GPIO_Init+0x310>)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a52      	ldr	r2, [pc, #328]	; (800346c <HAL_GPIO_Init+0x314>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d02b      	beq.n	800337e <HAL_GPIO_Init+0x226>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a51      	ldr	r2, [pc, #324]	; (8003470 <HAL_GPIO_Init+0x318>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d025      	beq.n	800337a <HAL_GPIO_Init+0x222>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a50      	ldr	r2, [pc, #320]	; (8003474 <HAL_GPIO_Init+0x31c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01f      	beq.n	8003376 <HAL_GPIO_Init+0x21e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4f      	ldr	r2, [pc, #316]	; (8003478 <HAL_GPIO_Init+0x320>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d019      	beq.n	8003372 <HAL_GPIO_Init+0x21a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4e      	ldr	r2, [pc, #312]	; (800347c <HAL_GPIO_Init+0x324>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <HAL_GPIO_Init+0x216>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4d      	ldr	r2, [pc, #308]	; (8003480 <HAL_GPIO_Init+0x328>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00d      	beq.n	800336a <HAL_GPIO_Init+0x212>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4c      	ldr	r2, [pc, #304]	; (8003484 <HAL_GPIO_Init+0x32c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <HAL_GPIO_Init+0x20e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <HAL_GPIO_Init+0x330>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_GPIO_Init+0x20a>
 800335e:	2307      	movs	r3, #7
 8003360:	e00e      	b.n	8003380 <HAL_GPIO_Init+0x228>
 8003362:	2308      	movs	r3, #8
 8003364:	e00c      	b.n	8003380 <HAL_GPIO_Init+0x228>
 8003366:	2306      	movs	r3, #6
 8003368:	e00a      	b.n	8003380 <HAL_GPIO_Init+0x228>
 800336a:	2305      	movs	r3, #5
 800336c:	e008      	b.n	8003380 <HAL_GPIO_Init+0x228>
 800336e:	2304      	movs	r3, #4
 8003370:	e006      	b.n	8003380 <HAL_GPIO_Init+0x228>
 8003372:	2303      	movs	r3, #3
 8003374:	e004      	b.n	8003380 <HAL_GPIO_Init+0x228>
 8003376:	2302      	movs	r3, #2
 8003378:	e002      	b.n	8003380 <HAL_GPIO_Init+0x228>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_GPIO_Init+0x228>
 800337e:	2300      	movs	r3, #0
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f002 0203 	and.w	r2, r2, #3
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	4093      	lsls	r3, r2
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003390:	4935      	ldr	r1, [pc, #212]	; (8003468 <HAL_GPIO_Init+0x310>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_GPIO_Init+0x334>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c2:	4a32      	ldr	r2, [pc, #200]	; (800348c <HAL_GPIO_Init+0x334>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_GPIO_Init+0x334>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_GPIO_Init+0x334>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_GPIO_Init+0x334>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_GPIO_Init+0x334>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_GPIO_Init+0x334>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003440:	4a12      	ldr	r2, [pc, #72]	; (800348c <HAL_GPIO_Init+0x334>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	f67f ae90 	bls.w	8003174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40013800 	.word	0x40013800
 800346c:	40020000 	.word	0x40020000
 8003470:	40020400 	.word	0x40020400
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40021000 	.word	0x40021000
 8003480:	40021400 	.word	0x40021400
 8003484:	40021800 	.word	0x40021800
 8003488:	40021c00 	.word	0x40021c00
 800348c:	40013c00 	.word	0x40013c00

08003490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e001      	b.n	80034b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e267      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d075      	beq.n	80035fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00c      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003526:	2b08      	cmp	r3, #8
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05b      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e242      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a68      	ldr	r2, [pc, #416]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7ff fc24 	bl	8002df8 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7ff fc20 	bl	8002df8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e207      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7ff fc10 	bl	8002df8 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7ff fc0c 	bl	8002df8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1f3      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0xe8>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7ff fbc5 	bl	8002df8 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003672:	f7ff fbc1 	bl	8002df8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a8      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7ff fba4 	bl	8002df8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b4:	f7ff fba0 	bl	8002df8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e187      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x248>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7ff fb84 	bl	8002df8 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f4:	f7ff fb80 	bl	8002df8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e167      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x200>
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x248>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7ff fb6d 	bl	8002df8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003722:	f7ff fb69 	bl	8002df8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e150      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b77      	ldr	r3, [pc, #476]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b74      	ldr	r3, [pc, #464]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a73      	ldr	r2, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7ff fb29 	bl	8002df8 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7ff fb25 	bl	8002df8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e10c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x2ea>
 80037d0:	4b64      	ldr	r3, [pc, #400]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a63      	ldr	r2, [pc, #396]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x30c>
 80037e6:	4b5f      	ldr	r3, [pc, #380]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a5e      	ldr	r2, [pc, #376]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a54      	ldr	r2, [pc, #336]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7ff faea 	bl	8002df8 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7ff fae6 	bl	8002df8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0cb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x334>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7ff fad4 	bl	8002df8 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7ff fad0 	bl	8002df8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b5      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a1 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d05c      	beq.n	8003958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d141      	bne.n	800392a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7ff faa4 	bl	8002df8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7ff faa0 	bl	8002df8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e087      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	491b      	ldr	r1, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7ff fa79 	bl	8002df8 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7ff fa75 	bl	8002df8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e05c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x416>
 8003928:	e054      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x478>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7ff fa62 	bl	8002df8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7ff fa5e 	bl	8002df8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e045      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x444>
 8003956:	e03d      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e038      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000
 800396c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4ec>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d028      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d111      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cc      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d90c      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b8      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	494d      	ldr	r1, [pc, #308]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e067      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7ff f990 	bl	8002df8 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7ff f98c 	bl	8002df8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d20c      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4916      	ldr	r1, [pc, #88]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f8f0 	bl	8002d70 <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	080066ec 	.word	0x080066ec
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	20000008 	.word	0x20000008

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b090      	sub	sp, #64	; 0x40
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 80a1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x3a>
 8003be2:	e09b      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003be8:	e09b      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bee:	e098      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	627a      	str	r2, [r7, #36]	; 0x24
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c1c:	fb03 f201 	mul.w	r2, r3, r1
 8003c20:	2300      	movs	r3, #0
 8003c22:	fb00 f303 	mul.w	r3, r0, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	4a43      	ldr	r2, [pc, #268]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c30:	460a      	mov	r2, r1
 8003c32:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c36:	4413      	add	r3, r2
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	61fa      	str	r2, [r7, #28]
 8003c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c4a:	f7fc fd25 	bl	8000698 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4613      	mov	r3, r2
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c56:	e053      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	617a      	str	r2, [r7, #20]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c6a:	f04f 0b00 	mov.w	fp, #0
 8003c6e:	4652      	mov	r2, sl
 8003c70:	465b      	mov	r3, fp
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	0159      	lsls	r1, r3, #5
 8003c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c80:	0150      	lsls	r0, r2, #5
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	ebb2 080a 	subs.w	r8, r2, sl
 8003c8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ca2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ca6:	eb63 0509 	sbc.w	r5, r3, r9
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	00eb      	lsls	r3, r5, #3
 8003cb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb8:	00e2      	lsls	r2, r4, #3
 8003cba:	4614      	mov	r4, r2
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	eb14 030a 	adds.w	r3, r4, sl
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	eb45 030b 	adc.w	r3, r5, fp
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	2200      	movs	r2, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	60fa      	str	r2, [r7, #12]
 8003cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf4:	f7fc fcd0 	bl	8000698 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3740      	adds	r7, #64	; 0x40
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	017d7840 	.word	0x017d7840

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	080066fc 	.word	0x080066fc

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	080066fc 	.word	0x080066fc

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe fdac 	bl	8002928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fad2 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e046      	b.n	8003eea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <HAL_TIM_Base_Start+0xb4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d01d      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HAL_TIM_Base_Start+0xb8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <HAL_TIM_Base_Start+0xbc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_TIM_Base_Start+0xc0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_TIM_Base_Start+0xc4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_TIM_Base_Start+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x70>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIM_Base_Start+0xcc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d111      	bne.n	8003ed8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d010      	beq.n	8003ee8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e007      	b.n	8003ee8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40010400 	.word	0x40010400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40001800 	.word	0x40001800

08003f14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e041      	b.n	8003faa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe fd16 	bl	800296c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 fa1a 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_TIM_PWM_Start+0x24>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e022      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d109      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0x3e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e015      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d109      	bne.n	800400c <HAL_TIM_PWM_Start+0x58>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e008      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07c      	b.n	8004120 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0x82>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004034:	e013      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d104      	bne.n	8004046 <HAL_TIM_PWM_Start+0x92>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004044:	e00b      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004054:	e003      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fc7a 	bl	8004960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_TIM_PWM_Start+0x174>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_TIM_PWM_Start+0xcc>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2c      	ldr	r2, [pc, #176]	; (800412c <HAL_TIM_PWM_Start+0x178>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_TIM_PWM_Start+0xd0>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_TIM_PWM_Start+0xd2>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_TIM_PWM_Start+0x174>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d01d      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_TIM_PWM_Start+0x17c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_TIM_PWM_Start+0x180>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <HAL_TIM_PWM_Start+0x184>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_TIM_PWM_Start+0x178>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <HAL_TIM_PWM_Start+0x188>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_TIM_PWM_Start+0x136>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <HAL_TIM_PWM_Start+0x18c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d111      	bne.n	800410e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d010      	beq.n	800411e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	e007      	b.n	800411e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40010000 	.word	0x40010000
 800412c:	40010400 	.word	0x40010400
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40001800 	.word	0x40001800

08004144 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_OC_ConfigChannel+0x1e>
 800415e:	2302      	movs	r3, #2
 8004160:	e048      	b.n	80041f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d839      	bhi.n	80041e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041e5 	.word	0x080041e5
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080041e5 	.word	0x080041e5
 8004188:	080041bb 	.word	0x080041bb
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041e5 	.word	0x080041e5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041c9 	.word	0x080041c9
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041d7 	.word	0x080041d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f98a 	bl	80044cc <TIM_OC1_SetConfig>
      break;
 80041b8:	e017      	b.n	80041ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f9f3 	bl	80045ac <TIM_OC2_SetConfig>
      break;
 80041c6:	e010      	b.n	80041ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fa62 	bl	8004698 <TIM_OC3_SetConfig>
      break;
 80041d4:	e009      	b.n	80041ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 facf 	bl	8004780 <TIM_OC4_SetConfig>
      break;
 80041e2:	e002      	b.n	80041ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
      break;
 80041e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIM_ConfigClockSource+0x1c>
 8004214:	2302      	movs	r3, #2
 8004216:	e0b4      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x186>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004250:	d03e      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004256:	f200 8087 	bhi.w	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	f000 8086 	beq.w	800436e <HAL_TIM_ConfigClockSource+0x172>
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d87f      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b70      	cmp	r3, #112	; 0x70
 800426a:	d01a      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0xa6>
 800426c:	2b70      	cmp	r3, #112	; 0x70
 800426e:	d87b      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d050      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x11a>
 8004274:	2b60      	cmp	r3, #96	; 0x60
 8004276:	d877      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d03c      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0xfa>
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d873      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d058      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x13a>
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d86f      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b30      	cmp	r3, #48	; 0x30
 800428a:	d064      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x15a>
 800428c:	2b30      	cmp	r3, #48	; 0x30
 800428e:	d86b      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b20      	cmp	r3, #32
 8004292:	d060      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x15a>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d867      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d05c      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x15a>
 800429c:	2b10      	cmp	r3, #16
 800429e:	d05a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x15a>
 80042a0:	e062      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6899      	ldr	r1, [r3, #8]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f000 fb35 	bl	8004920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	609a      	str	r2, [r3, #8]
      break;
 80042ce:	e04f      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6899      	ldr	r1, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f000 fb1e 	bl	8004920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f2:	609a      	str	r2, [r3, #8]
      break;
 80042f4:	e03c      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	461a      	mov	r2, r3
 8004304:	f000 fa92 	bl	800482c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2150      	movs	r1, #80	; 0x50
 800430e:	4618      	mov	r0, r3
 8004310:	f000 faeb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004314:	e02c      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	461a      	mov	r2, r3
 8004324:	f000 fab1 	bl	800488a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2160      	movs	r1, #96	; 0x60
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fadb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004334:	e01c      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	461a      	mov	r2, r3
 8004344:	f000 fa72 	bl	800482c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2140      	movs	r1, #64	; 0x40
 800434e:	4618      	mov	r0, r3
 8004350:	f000 facb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004354:	e00c      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f000 fac2 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004366:	e003      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      break;
 800436c:	e000      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800436e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a40      	ldr	r2, [pc, #256]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d00f      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <TIM_Base_SetConfig+0x120>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d027      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d023      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <TIM_Base_SetConfig+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <TIM_Base_SetConfig+0x128>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <TIM_Base_SetConfig+0x12c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <TIM_Base_SetConfig+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <TIM_Base_SetConfig+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <TIM_Base_SetConfig+0x13c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800
 80044c0:	40001800 	.word	0x40001800
 80044c4:	40001c00 	.word	0x40001c00
 80044c8:	40002000 	.word	0x40002000

080044cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0201 	bic.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0302 	bic.w	r3, r3, #2
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a20      	ldr	r2, [pc, #128]	; (80045a4 <TIM_OC1_SetConfig+0xd8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_OC1_SetConfig+0x64>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <TIM_OC1_SetConfig+0xdc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10c      	bne.n	800454a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0308 	bic.w	r3, r3, #8
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <TIM_OC1_SetConfig+0xd8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC1_SetConfig+0x8e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <TIM_OC1_SetConfig+0xdc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d111      	bne.n	800457e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	621a      	str	r2, [r3, #32]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40010400 	.word	0x40010400

080045ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0210 	bic.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0320 	bic.w	r3, r3, #32
 80045f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <TIM_OC2_SetConfig+0xe4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_OC2_SetConfig+0x68>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a21      	ldr	r2, [pc, #132]	; (8004694 <TIM_OC2_SetConfig+0xe8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10d      	bne.n	8004630 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <TIM_OC2_SetConfig+0xe4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC2_SetConfig+0x94>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <TIM_OC2_SetConfig+0xe8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d113      	bne.n	8004668 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40010400 	.word	0x40010400

08004698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a21      	ldr	r2, [pc, #132]	; (8004778 <TIM_OC3_SetConfig+0xe0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d003      	beq.n	80046fe <TIM_OC3_SetConfig+0x66>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a20      	ldr	r2, [pc, #128]	; (800477c <TIM_OC3_SetConfig+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10d      	bne.n	800471a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a16      	ldr	r2, [pc, #88]	; (8004778 <TIM_OC3_SetConfig+0xe0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_OC3_SetConfig+0x92>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <TIM_OC3_SetConfig+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d113      	bne.n	8004752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	621a      	str	r2, [r3, #32]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40010000 	.word	0x40010000
 800477c:	40010400 	.word	0x40010400

08004780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <TIM_OC4_SetConfig+0xa4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC4_SetConfig+0x68>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <TIM_OC4_SetConfig+0xa8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d109      	bne.n	80047fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40010400 	.word	0x40010400

0800482c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0210 	bic.w	r2, r3, #16
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	031b      	lsls	r3, r3, #12
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	f043 0307 	orr.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	021a      	lsls	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	431a      	orrs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2201      	movs	r2, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	43db      	mvns	r3, r3
 8004982:	401a      	ands	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e05a      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a10:	d01d      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40010400 	.word	0x40010400
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40001800 	.word	0x40001800

08004aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e03d      	b.n	8004b3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e03f      	b.n	8004bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd ff80 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fddf 	bl	8005750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	; 0x28
 8004be6:	af02      	add	r7, sp, #8
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d17c      	bne.n	8004cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_UART_Transmit+0x2c>
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e075      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x3e>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e06e      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	; 0x21
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fe f8df 	bl	8002df8 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Transmit+0x82>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c74:	e02a      	b.n	8004ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fb1f 	bl	80052c4 <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e036      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1cf      	bne.n	8004c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	; 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 faef 	bl	80052c4 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	4613      	mov	r3, r2
 8004d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d11d      	bne.n	8004d5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Receive_IT+0x26>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e016      	b.n	8004d5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Receive_IT+0x38>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e00f      	b.n	8004d5e <HAL_UART_Receive_IT+0x58>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fb24 	bl	80053a0 <UART_Start_Receive_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	e000      	b.n	8004d5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
  }
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b0ba      	sub	sp, #232	; 0xe8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_UART_IRQHandler+0x66>
 8004dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fc07 	bl	80055da <UART_Receive_IT>
      return;
 8004dcc:	e256      	b.n	800527c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80de 	beq.w	8004f94 <HAL_UART_IRQHandler+0x22c>
 8004dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80d1 	beq.w	8004f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xae>
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0201 	orr.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_UART_IRQHandler+0xd2>
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f043 0202 	orr.w	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_UART_IRQHandler+0xf6>
 8004e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <HAL_UART_IRQHandler+0x126>
 8004e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0208 	orr.w	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 81ed 	beq.w	8005272 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x14e>
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fb92 	bl	80055da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x17a>
 8004eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04f      	beq.n	8004f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa9a 	bl	800541c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d141      	bne.n	8004f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1d9      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d013      	beq.n	8004f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	4a7d      	ldr	r2, [pc, #500]	; (8005144 <HAL_UART_IRQHandler+0x3dc>)
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe f8db 	bl	8003112 <HAL_DMA_Abort_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e00e      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f990 	bl	8005298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e00a      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f98c 	bl	8005298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e006      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f988 	bl	8005298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f8e:	e170      	b.n	8005272 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	bf00      	nop
    return;
 8004f92:	e16e      	b.n	8005272 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 814a 	bne.w	8005232 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8143 	beq.w	8005232 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 813c 	beq.w	8005232 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	f040 80b4 	bne.w	8005148 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8140 	beq.w	8005276 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f080 8139 	bcs.w	8005276 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	f000 8088 	beq.w	800512a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800504a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800505e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1d9      	bne.n	800501a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800508a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800508e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800509c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e1      	bne.n	8005066 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e3      	bne.n	80050a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	f023 0310 	bic.w	r3, r3, #16
 80050fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	330c      	adds	r3, #12
 8005108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800510c:	65ba      	str	r2, [r7, #88]	; 0x58
 800510e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800511a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e3      	bne.n	80050e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	4618      	mov	r0, r3
 8005126:	f7fd ff84 	bl	8003032 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005132:	b29b      	uxth	r3, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8b6 	bl	80052ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005140:	e099      	b.n	8005276 <HAL_UART_IRQHandler+0x50e>
 8005142:	bf00      	nop
 8005144:	080054e3 	.word	0x080054e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 808b 	beq.w	800527a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8086 	beq.w	800527a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005192:	647a      	str	r2, [r7, #68]	; 0x44
 8005194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e3      	bne.n	800516e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3314      	adds	r3, #20
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	623b      	str	r3, [r7, #32]
   return(result);
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051ca:	633a      	str	r2, [r7, #48]	; 0x30
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e3      	bne.n	80051a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0310 	bic.w	r3, r3, #16
 8005202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005210:	61fa      	str	r2, [r7, #28]
 8005212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	69b9      	ldr	r1, [r7, #24]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	617b      	str	r3, [r7, #20]
   return(result);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e3      	bne.n	80051ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f83e 	bl	80052ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005230:	e023      	b.n	800527a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_UART_IRQHandler+0x4ea>
 800523e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f95d 	bl	800550a <UART_Transmit_IT>
    return;
 8005250:	e014      	b.n	800527c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <HAL_UART_IRQHandler+0x514>
 800525e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f99d 	bl	80055aa <UART_EndTransmit_IT>
    return;
 8005270:	e004      	b.n	800527c <HAL_UART_IRQHandler+0x514>
    return;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <HAL_UART_IRQHandler+0x514>
      return;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_UART_IRQHandler+0x514>
      return;
 800527a:	bf00      	nop
  }
}
 800527c:	37e8      	adds	r7, #232	; 0xe8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop

08005284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b090      	sub	sp, #64	; 0x40
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d4:	e050      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d04c      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e4:	f7fd fd88 	bl	8002df8 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d241      	bcs.n	8005378 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005314:	637a      	str	r2, [r7, #52]	; 0x34
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800531a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e5      	bne.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	613b      	str	r3, [r7, #16]
   return(result);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005348:	623a      	str	r2, [r7, #32]
 800534a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	69f9      	ldr	r1, [r7, #28]
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	61bb      	str	r3, [r7, #24]
   return(result);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e00f      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	429a      	cmp	r2, r3
 8005394:	d09f      	beq.n	80052d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3740      	adds	r7, #64	; 0x40
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	88fa      	ldrh	r2, [r7, #6]
 80053be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2222      	movs	r2, #34	; 0x22
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0220 	orr.w	r2, r2, #32
 800540c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b095      	sub	sp, #84	; 0x54
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005444:	643a      	str	r2, [r7, #64]	; 0x40
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800544a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3314      	adds	r3, #20
 800545e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	61fb      	str	r3, [r7, #28]
   return(result);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3314      	adds	r3, #20
 8005476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e5      	bne.n	8005458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	2b01      	cmp	r3, #1
 8005492:	d119      	bne.n	80054c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f023 0310 	bic.w	r3, r3, #16
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b4:	61ba      	str	r2, [r7, #24]
 80054b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6979      	ldr	r1, [r7, #20]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	613b      	str	r3, [r7, #16]
   return(result);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054d6:	bf00      	nop
 80054d8:	3754      	adds	r7, #84	; 0x54
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fecb 	bl	8005298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b21      	cmp	r3, #33	; 0x21
 800551c:	d13e      	bne.n	800559c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005526:	d114      	bne.n	8005552 <UART_Transmit_IT+0x48>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d110      	bne.n	8005552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]
 8005550:	e008      	b.n	8005564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6211      	str	r1, [r2, #32]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe5a 	bl	8005284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08c      	sub	sp, #48	; 0x30
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b22      	cmp	r3, #34	; 0x22
 80055ec:	f040 80ab 	bne.w	8005746 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f8:	d117      	bne.n	800562a <UART_Receive_IT+0x50>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	b29a      	uxth	r2, r3
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
 8005628:	e026      	b.n	8005678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d007      	beq.n	800564e <UART_Receive_IT+0x74>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <UART_Receive_IT+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e008      	b.n	800566e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005688:	2b00      	cmp	r3, #0
 800568a:	d15a      	bne.n	8005742 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0220 	bic.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d135      	bne.n	8005738 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	613b      	str	r3, [r7, #16]
   return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f023 0310 	bic.w	r3, r3, #16
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	623a      	str	r2, [r7, #32]
 80056f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	69f9      	ldr	r1, [r7, #28]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b10      	cmp	r3, #16
 8005712:	d10a      	bne.n	800572a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fdbb 	bl	80052ac <HAL_UARTEx_RxEventCallback>
 8005736:	e002      	b.n	800573e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc f943 	bl	80019c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e002      	b.n	8005748 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3730      	adds	r7, #48	; 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005754:	b0c0      	sub	sp, #256	; 0x100
 8005756:	af00      	add	r7, sp, #0
 8005758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	68d9      	ldr	r1, [r3, #12]
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	ea40 0301 	orr.w	r3, r0, r1
 8005778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	431a      	orrs	r2, r3
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	431a      	orrs	r2, r3
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057a8:	f021 010c 	bic.w	r1, r1, #12
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057b6:	430b      	orrs	r3, r1
 80057b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ca:	6999      	ldr	r1, [r3, #24]
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	ea40 0301 	orr.w	r3, r0, r1
 80057d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b8f      	ldr	r3, [pc, #572]	; (8005a1c <UART_SetConfig+0x2cc>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d005      	beq.n	80057f0 <UART_SetConfig+0xa0>
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b8d      	ldr	r3, [pc, #564]	; (8005a20 <UART_SetConfig+0x2d0>)
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d104      	bne.n	80057fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057f0:	f7fe fac4 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 80057f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057f8:	e003      	b.n	8005802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057fa:	f7fe faab 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 80057fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580c:	f040 810c 	bne.w	8005a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005814:	2200      	movs	r2, #0
 8005816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800581a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800581e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	1891      	adds	r1, r2, r2
 8005828:	65b9      	str	r1, [r7, #88]	; 0x58
 800582a:	415b      	adcs	r3, r3
 800582c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800582e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005832:	4621      	mov	r1, r4
 8005834:	eb12 0801 	adds.w	r8, r2, r1
 8005838:	4629      	mov	r1, r5
 800583a:	eb43 0901 	adc.w	r9, r3, r1
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800584a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800584e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005852:	4690      	mov	r8, r2
 8005854:	4699      	mov	r9, r3
 8005856:	4623      	mov	r3, r4
 8005858:	eb18 0303 	adds.w	r3, r8, r3
 800585c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005860:	462b      	mov	r3, r5
 8005862:	eb49 0303 	adc.w	r3, r9, r3
 8005866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800587a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800587e:	460b      	mov	r3, r1
 8005880:	18db      	adds	r3, r3, r3
 8005882:	653b      	str	r3, [r7, #80]	; 0x50
 8005884:	4613      	mov	r3, r2
 8005886:	eb42 0303 	adc.w	r3, r2, r3
 800588a:	657b      	str	r3, [r7, #84]	; 0x54
 800588c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005894:	f7fa ff00 	bl	8000698 <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4b61      	ldr	r3, [pc, #388]	; (8005a24 <UART_SetConfig+0x2d4>)
 800589e:	fba3 2302 	umull	r2, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	011c      	lsls	r4, r3, #4
 80058a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	1891      	adds	r1, r2, r2
 80058be:	64b9      	str	r1, [r7, #72]	; 0x48
 80058c0:	415b      	adcs	r3, r3
 80058c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058c8:	4641      	mov	r1, r8
 80058ca:	eb12 0a01 	adds.w	sl, r2, r1
 80058ce:	4649      	mov	r1, r9
 80058d0:	eb43 0b01 	adc.w	fp, r3, r1
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e8:	4692      	mov	sl, r2
 80058ea:	469b      	mov	fp, r3
 80058ec:	4643      	mov	r3, r8
 80058ee:	eb1a 0303 	adds.w	r3, sl, r3
 80058f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058f6:	464b      	mov	r3, r9
 80058f8:	eb4b 0303 	adc.w	r3, fp, r3
 80058fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800590c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005914:	460b      	mov	r3, r1
 8005916:	18db      	adds	r3, r3, r3
 8005918:	643b      	str	r3, [r7, #64]	; 0x40
 800591a:	4613      	mov	r3, r2
 800591c:	eb42 0303 	adc.w	r3, r2, r3
 8005920:	647b      	str	r3, [r7, #68]	; 0x44
 8005922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800592a:	f7fa feb5 	bl	8000698 <__aeabi_uldivmod>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4611      	mov	r1, r2
 8005934:	4b3b      	ldr	r3, [pc, #236]	; (8005a24 <UART_SetConfig+0x2d4>)
 8005936:	fba3 2301 	umull	r2, r3, r3, r1
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2264      	movs	r2, #100	; 0x64
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	1acb      	subs	r3, r1, r3
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800594a:	4b36      	ldr	r3, [pc, #216]	; (8005a24 <UART_SetConfig+0x2d4>)
 800594c:	fba3 2302 	umull	r2, r3, r3, r2
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005958:	441c      	add	r4, r3
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	63b9      	str	r1, [r7, #56]	; 0x38
 8005974:	415b      	adcs	r3, r3
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800597c:	4641      	mov	r1, r8
 800597e:	1851      	adds	r1, r2, r1
 8005980:	6339      	str	r1, [r7, #48]	; 0x30
 8005982:	4649      	mov	r1, r9
 8005984:	414b      	adcs	r3, r1
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005994:	4659      	mov	r1, fp
 8005996:	00cb      	lsls	r3, r1, #3
 8005998:	4651      	mov	r1, sl
 800599a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800599e:	4651      	mov	r1, sl
 80059a0:	00ca      	lsls	r2, r1, #3
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	4642      	mov	r2, r8
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059b0:	464b      	mov	r3, r9
 80059b2:	460a      	mov	r2, r1
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059d0:	460b      	mov	r3, r1
 80059d2:	18db      	adds	r3, r3, r3
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d6:	4613      	mov	r3, r2
 80059d8:	eb42 0303 	adc.w	r3, r2, r3
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059e6:	f7fa fe57 	bl	8000698 <__aeabi_uldivmod>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <UART_SetConfig+0x2d4>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	2164      	movs	r1, #100	; 0x64
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	3332      	adds	r3, #50	; 0x32
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <UART_SetConfig+0x2d4>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f003 0207 	and.w	r2, r3, #7
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4422      	add	r2, r4
 8005a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a18:	e105      	b.n	8005c26 <UART_SetConfig+0x4d6>
 8005a1a:	bf00      	nop
 8005a1c:	40011000 	.word	0x40011000
 8005a20:	40011400 	.word	0x40011400
 8005a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	1891      	adds	r1, r2, r2
 8005a40:	6239      	str	r1, [r7, #32]
 8005a42:	415b      	adcs	r3, r3
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	1854      	adds	r4, r2, r1
 8005a4e:	4649      	mov	r1, r9
 8005a50:	eb43 0501 	adc.w	r5, r3, r1
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	00eb      	lsls	r3, r5, #3
 8005a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a62:	00e2      	lsls	r2, r4, #3
 8005a64:	4614      	mov	r4, r2
 8005a66:	461d      	mov	r5, r3
 8005a68:	4643      	mov	r3, r8
 8005a6a:	18e3      	adds	r3, r4, r3
 8005a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a70:	464b      	mov	r3, r9
 8005a72:	eb45 0303 	adc.w	r3, r5, r3
 8005a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a96:	4629      	mov	r1, r5
 8005a98:	008b      	lsls	r3, r1, #2
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	008a      	lsls	r2, r1, #2
 8005aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005aa8:	f7fa fdf6 	bl	8000698 <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4b60      	ldr	r3, [pc, #384]	; (8005c34 <UART_SetConfig+0x4e4>)
 8005ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	011c      	lsls	r4, r3, #4
 8005aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005acc:	4642      	mov	r2, r8
 8005ace:	464b      	mov	r3, r9
 8005ad0:	1891      	adds	r1, r2, r2
 8005ad2:	61b9      	str	r1, [r7, #24]
 8005ad4:	415b      	adcs	r3, r3
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005adc:	4641      	mov	r1, r8
 8005ade:	1851      	adds	r1, r2, r1
 8005ae0:	6139      	str	r1, [r7, #16]
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	414b      	adcs	r3, r1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af4:	4659      	mov	r1, fp
 8005af6:	00cb      	lsls	r3, r1, #3
 8005af8:	4651      	mov	r1, sl
 8005afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005afe:	4651      	mov	r1, sl
 8005b00:	00ca      	lsls	r2, r1, #3
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	4603      	mov	r3, r0
 8005b08:	4642      	mov	r2, r8
 8005b0a:	189b      	adds	r3, r3, r2
 8005b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b10:	464b      	mov	r3, r9
 8005b12:	460a      	mov	r2, r1
 8005b14:	eb42 0303 	adc.w	r3, r2, r3
 8005b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b34:	4649      	mov	r1, r9
 8005b36:	008b      	lsls	r3, r1, #2
 8005b38:	4641      	mov	r1, r8
 8005b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b3e:	4641      	mov	r1, r8
 8005b40:	008a      	lsls	r2, r1, #2
 8005b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b46:	f7fa fda7 	bl	8000698 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4b39      	ldr	r3, [pc, #228]	; (8005c34 <UART_SetConfig+0x4e4>)
 8005b50:	fba3 1302 	umull	r1, r3, r3, r2
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	2164      	movs	r1, #100	; 0x64
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	3332      	adds	r3, #50	; 0x32
 8005b62:	4a34      	ldr	r2, [pc, #208]	; (8005c34 <UART_SetConfig+0x4e4>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6e:	441c      	add	r4, r3
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b74:	2200      	movs	r2, #0
 8005b76:	673b      	str	r3, [r7, #112]	; 0x70
 8005b78:	677a      	str	r2, [r7, #116]	; 0x74
 8005b7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b7e:	4642      	mov	r2, r8
 8005b80:	464b      	mov	r3, r9
 8005b82:	1891      	adds	r1, r2, r2
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	415b      	adcs	r3, r3
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b8e:	4641      	mov	r1, r8
 8005b90:	1851      	adds	r1, r2, r1
 8005b92:	6039      	str	r1, [r7, #0]
 8005b94:	4649      	mov	r1, r9
 8005b96:	414b      	adcs	r3, r1
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	00cb      	lsls	r3, r1, #3
 8005baa:	4651      	mov	r1, sl
 8005bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bb0:	4651      	mov	r1, sl
 8005bb2:	00ca      	lsls	r2, r1, #3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4642      	mov	r2, r8
 8005bbc:	189b      	adds	r3, r3, r2
 8005bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	460a      	mov	r2, r1
 8005bc4:	eb42 0303 	adc.w	r3, r2, r3
 8005bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8005bd4:	667a      	str	r2, [r7, #100]	; 0x64
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005be2:	4649      	mov	r1, r9
 8005be4:	008b      	lsls	r3, r1, #2
 8005be6:	4641      	mov	r1, r8
 8005be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bec:	4641      	mov	r1, r8
 8005bee:	008a      	lsls	r2, r1, #2
 8005bf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bf4:	f7fa fd50 	bl	8000698 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <UART_SetConfig+0x4e4>)
 8005bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2164      	movs	r1, #100	; 0x64
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	3332      	adds	r3, #50	; 0x32
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <UART_SetConfig+0x4e4>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4422      	add	r2, r4
 8005c24:	609a      	str	r2, [r3, #8]
}
 8005c26:	bf00      	nop
 8005c28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c32:	bf00      	nop
 8005c34:	51eb851f 	.word	0x51eb851f

08005c38 <atoi>:
 8005c38:	220a      	movs	r2, #10
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	f000 b8d4 	b.w	8005de8 <strtol>

08005c40 <__errno>:
 8005c40:	4b01      	ldr	r3, [pc, #4]	; (8005c48 <__errno+0x8>)
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	4d0d      	ldr	r5, [pc, #52]	; (8005c84 <__libc_init_array+0x38>)
 8005c50:	4c0d      	ldr	r4, [pc, #52]	; (8005c88 <__libc_init_array+0x3c>)
 8005c52:	1b64      	subs	r4, r4, r5
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	2600      	movs	r6, #0
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	4d0b      	ldr	r5, [pc, #44]	; (8005c8c <__libc_init_array+0x40>)
 8005c5e:	4c0c      	ldr	r4, [pc, #48]	; (8005c90 <__libc_init_array+0x44>)
 8005c60:	f000 fd1a 	bl	8006698 <_init>
 8005c64:	1b64      	subs	r4, r4, r5
 8005c66:	10a4      	asrs	r4, r4, #2
 8005c68:	2600      	movs	r6, #0
 8005c6a:	42a6      	cmp	r6, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c74:	4798      	blx	r3
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7e:	4798      	blx	r3
 8005c80:	3601      	adds	r6, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08006840 	.word	0x08006840
 8005c88:	08006840 	.word	0x08006840
 8005c8c:	08006840 	.word	0x08006840
 8005c90:	08006844 	.word	0x08006844

08005c94 <memset>:
 8005c94:	4402      	add	r2, r0
 8005c96:	4603      	mov	r3, r0
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d100      	bne.n	8005c9e <memset+0xa>
 8005c9c:	4770      	bx	lr
 8005c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca2:	e7f9      	b.n	8005c98 <memset+0x4>

08005ca4 <siprintf>:
 8005ca4:	b40e      	push	{r1, r2, r3}
 8005ca6:	b500      	push	{lr}
 8005ca8:	b09c      	sub	sp, #112	; 0x70
 8005caa:	ab1d      	add	r3, sp, #116	; 0x74
 8005cac:	9002      	str	r0, [sp, #8]
 8005cae:	9006      	str	r0, [sp, #24]
 8005cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cb4:	4809      	ldr	r0, [pc, #36]	; (8005cdc <siprintf+0x38>)
 8005cb6:	9107      	str	r1, [sp, #28]
 8005cb8:	9104      	str	r1, [sp, #16]
 8005cba:	4909      	ldr	r1, [pc, #36]	; (8005ce0 <siprintf+0x3c>)
 8005cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc0:	9105      	str	r1, [sp, #20]
 8005cc2:	6800      	ldr	r0, [r0, #0]
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	a902      	add	r1, sp, #8
 8005cc8:	f000 f8f4 	bl	8005eb4 <_svfiprintf_r>
 8005ccc:	9b02      	ldr	r3, [sp, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	b01c      	add	sp, #112	; 0x70
 8005cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd8:	b003      	add	sp, #12
 8005cda:	4770      	bx	lr
 8005cdc:	20000010 	.word	0x20000010
 8005ce0:	ffff0208 	.word	0xffff0208

08005ce4 <_strtol_l.constprop.0>:
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cea:	d001      	beq.n	8005cf0 <_strtol_l.constprop.0+0xc>
 8005cec:	2b24      	cmp	r3, #36	; 0x24
 8005cee:	d906      	bls.n	8005cfe <_strtol_l.constprop.0+0x1a>
 8005cf0:	f7ff ffa6 	bl	8005c40 <__errno>
 8005cf4:	2316      	movs	r3, #22
 8005cf6:	6003      	str	r3, [r0, #0]
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005de4 <_strtol_l.constprop.0+0x100>
 8005d02:	460d      	mov	r5, r1
 8005d04:	462e      	mov	r6, r5
 8005d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005d0e:	f017 0708 	ands.w	r7, r7, #8
 8005d12:	d1f7      	bne.n	8005d04 <_strtol_l.constprop.0+0x20>
 8005d14:	2c2d      	cmp	r4, #45	; 0x2d
 8005d16:	d132      	bne.n	8005d7e <_strtol_l.constprop.0+0x9a>
 8005d18:	782c      	ldrb	r4, [r5, #0]
 8005d1a:	2701      	movs	r7, #1
 8005d1c:	1cb5      	adds	r5, r6, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d05b      	beq.n	8005dda <_strtol_l.constprop.0+0xf6>
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d109      	bne.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005d26:	2c30      	cmp	r4, #48	; 0x30
 8005d28:	d107      	bne.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005d2a:	782c      	ldrb	r4, [r5, #0]
 8005d2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d30:	2c58      	cmp	r4, #88	; 0x58
 8005d32:	d14d      	bne.n	8005dd0 <_strtol_l.constprop.0+0xec>
 8005d34:	786c      	ldrb	r4, [r5, #1]
 8005d36:	2310      	movs	r3, #16
 8005d38:	3502      	adds	r5, #2
 8005d3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d42:	f04f 0c00 	mov.w	ip, #0
 8005d46:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d4a:	4666      	mov	r6, ip
 8005d4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005d50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005d54:	f1be 0f09 	cmp.w	lr, #9
 8005d58:	d816      	bhi.n	8005d88 <_strtol_l.constprop.0+0xa4>
 8005d5a:	4674      	mov	r4, lr
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	dd24      	ble.n	8005daa <_strtol_l.constprop.0+0xc6>
 8005d60:	f1bc 0f00 	cmp.w	ip, #0
 8005d64:	db1e      	blt.n	8005da4 <_strtol_l.constprop.0+0xc0>
 8005d66:	45b1      	cmp	r9, r6
 8005d68:	d31c      	bcc.n	8005da4 <_strtol_l.constprop.0+0xc0>
 8005d6a:	d101      	bne.n	8005d70 <_strtol_l.constprop.0+0x8c>
 8005d6c:	45a2      	cmp	sl, r4
 8005d6e:	db19      	blt.n	8005da4 <_strtol_l.constprop.0+0xc0>
 8005d70:	fb06 4603 	mla	r6, r6, r3, r4
 8005d74:	f04f 0c01 	mov.w	ip, #1
 8005d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d7c:	e7e8      	b.n	8005d50 <_strtol_l.constprop.0+0x6c>
 8005d7e:	2c2b      	cmp	r4, #43	; 0x2b
 8005d80:	bf04      	itt	eq
 8005d82:	782c      	ldrbeq	r4, [r5, #0]
 8005d84:	1cb5      	addeq	r5, r6, #2
 8005d86:	e7ca      	b.n	8005d1e <_strtol_l.constprop.0+0x3a>
 8005d88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005d8c:	f1be 0f19 	cmp.w	lr, #25
 8005d90:	d801      	bhi.n	8005d96 <_strtol_l.constprop.0+0xb2>
 8005d92:	3c37      	subs	r4, #55	; 0x37
 8005d94:	e7e2      	b.n	8005d5c <_strtol_l.constprop.0+0x78>
 8005d96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005d9a:	f1be 0f19 	cmp.w	lr, #25
 8005d9e:	d804      	bhi.n	8005daa <_strtol_l.constprop.0+0xc6>
 8005da0:	3c57      	subs	r4, #87	; 0x57
 8005da2:	e7db      	b.n	8005d5c <_strtol_l.constprop.0+0x78>
 8005da4:	f04f 3cff 	mov.w	ip, #4294967295
 8005da8:	e7e6      	b.n	8005d78 <_strtol_l.constprop.0+0x94>
 8005daa:	f1bc 0f00 	cmp.w	ip, #0
 8005dae:	da05      	bge.n	8005dbc <_strtol_l.constprop.0+0xd8>
 8005db0:	2322      	movs	r3, #34	; 0x22
 8005db2:	6003      	str	r3, [r0, #0]
 8005db4:	4646      	mov	r6, r8
 8005db6:	b942      	cbnz	r2, 8005dca <_strtol_l.constprop.0+0xe6>
 8005db8:	4630      	mov	r0, r6
 8005dba:	e79e      	b.n	8005cfa <_strtol_l.constprop.0+0x16>
 8005dbc:	b107      	cbz	r7, 8005dc0 <_strtol_l.constprop.0+0xdc>
 8005dbe:	4276      	negs	r6, r6
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d0f9      	beq.n	8005db8 <_strtol_l.constprop.0+0xd4>
 8005dc4:	f1bc 0f00 	cmp.w	ip, #0
 8005dc8:	d000      	beq.n	8005dcc <_strtol_l.constprop.0+0xe8>
 8005dca:	1e69      	subs	r1, r5, #1
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	e7f3      	b.n	8005db8 <_strtol_l.constprop.0+0xd4>
 8005dd0:	2430      	movs	r4, #48	; 0x30
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1b1      	bne.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	e7af      	b.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005dda:	2c30      	cmp	r4, #48	; 0x30
 8005ddc:	d0a5      	beq.n	8005d2a <_strtol_l.constprop.0+0x46>
 8005dde:	230a      	movs	r3, #10
 8005de0:	e7ab      	b.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005de2:	bf00      	nop
 8005de4:	08006705 	.word	0x08006705

08005de8 <strtol>:
 8005de8:	4613      	mov	r3, r2
 8005dea:	460a      	mov	r2, r1
 8005dec:	4601      	mov	r1, r0
 8005dee:	4802      	ldr	r0, [pc, #8]	; (8005df8 <strtol+0x10>)
 8005df0:	6800      	ldr	r0, [r0, #0]
 8005df2:	f7ff bf77 	b.w	8005ce4 <_strtol_l.constprop.0>
 8005df6:	bf00      	nop
 8005df8:	20000010 	.word	0x20000010

08005dfc <__ssputs_r>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	688e      	ldr	r6, [r1, #8]
 8005e02:	429e      	cmp	r6, r3
 8005e04:	4682      	mov	sl, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	4690      	mov	r8, r2
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	d838      	bhi.n	8005e80 <__ssputs_r+0x84>
 8005e0e:	898a      	ldrh	r2, [r1, #12]
 8005e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e14:	d032      	beq.n	8005e7c <__ssputs_r+0x80>
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	6909      	ldr	r1, [r1, #16]
 8005e1a:	eba5 0901 	sub.w	r9, r5, r1
 8005e1e:	6965      	ldr	r5, [r4, #20]
 8005e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e28:	3301      	adds	r3, #1
 8005e2a:	444b      	add	r3, r9
 8005e2c:	106d      	asrs	r5, r5, #1
 8005e2e:	429d      	cmp	r5, r3
 8005e30:	bf38      	it	cc
 8005e32:	461d      	movcc	r5, r3
 8005e34:	0553      	lsls	r3, r2, #21
 8005e36:	d531      	bpl.n	8005e9c <__ssputs_r+0xa0>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f000 fb63 	bl	8006504 <_malloc_r>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	b950      	cbnz	r0, 8005e58 <__ssputs_r+0x5c>
 8005e42:	230c      	movs	r3, #12
 8005e44:	f8ca 3000 	str.w	r3, [sl]
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e58:	6921      	ldr	r1, [r4, #16]
 8005e5a:	464a      	mov	r2, r9
 8005e5c:	f000 fabe 	bl	80063dc <memcpy>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	6126      	str	r6, [r4, #16]
 8005e6e:	6165      	str	r5, [r4, #20]
 8005e70:	444e      	add	r6, r9
 8005e72:	eba5 0509 	sub.w	r5, r5, r9
 8005e76:	6026      	str	r6, [r4, #0]
 8005e78:	60a5      	str	r5, [r4, #8]
 8005e7a:	463e      	mov	r6, r7
 8005e7c:	42be      	cmp	r6, r7
 8005e7e:	d900      	bls.n	8005e82 <__ssputs_r+0x86>
 8005e80:	463e      	mov	r6, r7
 8005e82:	6820      	ldr	r0, [r4, #0]
 8005e84:	4632      	mov	r2, r6
 8005e86:	4641      	mov	r1, r8
 8005e88:	f000 fab6 	bl	80063f8 <memmove>
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	1b9b      	subs	r3, r3, r6
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	4433      	add	r3, r6
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e7db      	b.n	8005e54 <__ssputs_r+0x58>
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	f000 fba5 	bl	80065ec <_realloc_r>
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d1e1      	bne.n	8005e6c <__ssputs_r+0x70>
 8005ea8:	6921      	ldr	r1, [r4, #16]
 8005eaa:	4650      	mov	r0, sl
 8005eac:	f000 fabe 	bl	800642c <_free_r>
 8005eb0:	e7c7      	b.n	8005e42 <__ssputs_r+0x46>
	...

08005eb4 <_svfiprintf_r>:
 8005eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb8:	4698      	mov	r8, r3
 8005eba:	898b      	ldrh	r3, [r1, #12]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	b09d      	sub	sp, #116	; 0x74
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	d50e      	bpl.n	8005ee6 <_svfiprintf_r+0x32>
 8005ec8:	690b      	ldr	r3, [r1, #16]
 8005eca:	b963      	cbnz	r3, 8005ee6 <_svfiprintf_r+0x32>
 8005ecc:	2140      	movs	r1, #64	; 0x40
 8005ece:	f000 fb19 	bl	8006504 <_malloc_r>
 8005ed2:	6028      	str	r0, [r5, #0]
 8005ed4:	6128      	str	r0, [r5, #16]
 8005ed6:	b920      	cbnz	r0, 8005ee2 <_svfiprintf_r+0x2e>
 8005ed8:	230c      	movs	r3, #12
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	e0d1      	b.n	8006086 <_svfiprintf_r+0x1d2>
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	616b      	str	r3, [r5, #20]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eea:	2320      	movs	r3, #32
 8005eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef4:	2330      	movs	r3, #48	; 0x30
 8005ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060a0 <_svfiprintf_r+0x1ec>
 8005efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005efe:	f04f 0901 	mov.w	r9, #1
 8005f02:	4623      	mov	r3, r4
 8005f04:	469a      	mov	sl, r3
 8005f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f0a:	b10a      	cbz	r2, 8005f10 <_svfiprintf_r+0x5c>
 8005f0c:	2a25      	cmp	r2, #37	; 0x25
 8005f0e:	d1f9      	bne.n	8005f04 <_svfiprintf_r+0x50>
 8005f10:	ebba 0b04 	subs.w	fp, sl, r4
 8005f14:	d00b      	beq.n	8005f2e <_svfiprintf_r+0x7a>
 8005f16:	465b      	mov	r3, fp
 8005f18:	4622      	mov	r2, r4
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	f7ff ff6d 	bl	8005dfc <__ssputs_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	f000 80aa 	beq.w	800607c <_svfiprintf_r+0x1c8>
 8005f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2a:	445a      	add	r2, fp
 8005f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80a2 	beq.w	800607c <_svfiprintf_r+0x1c8>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f42:	f10a 0a01 	add.w	sl, sl, #1
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	9307      	str	r3, [sp, #28]
 8005f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f50:	4654      	mov	r4, sl
 8005f52:	2205      	movs	r2, #5
 8005f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f58:	4851      	ldr	r0, [pc, #324]	; (80060a0 <_svfiprintf_r+0x1ec>)
 8005f5a:	f7fa f941 	bl	80001e0 <memchr>
 8005f5e:	9a04      	ldr	r2, [sp, #16]
 8005f60:	b9d8      	cbnz	r0, 8005f9a <_svfiprintf_r+0xe6>
 8005f62:	06d0      	lsls	r0, r2, #27
 8005f64:	bf44      	itt	mi
 8005f66:	2320      	movmi	r3, #32
 8005f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f6c:	0711      	lsls	r1, r2, #28
 8005f6e:	bf44      	itt	mi
 8005f70:	232b      	movmi	r3, #43	; 0x2b
 8005f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f76:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7c:	d015      	beq.n	8005faa <_svfiprintf_r+0xf6>
 8005f7e:	9a07      	ldr	r2, [sp, #28]
 8005f80:	4654      	mov	r4, sl
 8005f82:	2000      	movs	r0, #0
 8005f84:	f04f 0c0a 	mov.w	ip, #10
 8005f88:	4621      	mov	r1, r4
 8005f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f8e:	3b30      	subs	r3, #48	; 0x30
 8005f90:	2b09      	cmp	r3, #9
 8005f92:	d94e      	bls.n	8006032 <_svfiprintf_r+0x17e>
 8005f94:	b1b0      	cbz	r0, 8005fc4 <_svfiprintf_r+0x110>
 8005f96:	9207      	str	r2, [sp, #28]
 8005f98:	e014      	b.n	8005fc4 <_svfiprintf_r+0x110>
 8005f9a:	eba0 0308 	sub.w	r3, r0, r8
 8005f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	46a2      	mov	sl, r4
 8005fa8:	e7d2      	b.n	8005f50 <_svfiprintf_r+0x9c>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d19      	adds	r1, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9103      	str	r1, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfbb      	ittet	lt
 8005fb6:	425b      	neglt	r3, r3
 8005fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fbc:	9307      	strge	r3, [sp, #28]
 8005fbe:	9307      	strlt	r3, [sp, #28]
 8005fc0:	bfb8      	it	lt
 8005fc2:	9204      	strlt	r2, [sp, #16]
 8005fc4:	7823      	ldrb	r3, [r4, #0]
 8005fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc8:	d10c      	bne.n	8005fe4 <_svfiprintf_r+0x130>
 8005fca:	7863      	ldrb	r3, [r4, #1]
 8005fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005fce:	d135      	bne.n	800603c <_svfiprintf_r+0x188>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9203      	str	r2, [sp, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfb8      	it	lt
 8005fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fe0:	3402      	adds	r4, #2
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060b0 <_svfiprintf_r+0x1fc>
 8005fe8:	7821      	ldrb	r1, [r4, #0]
 8005fea:	2203      	movs	r2, #3
 8005fec:	4650      	mov	r0, sl
 8005fee:	f7fa f8f7 	bl	80001e0 <memchr>
 8005ff2:	b140      	cbz	r0, 8006006 <_svfiprintf_r+0x152>
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	eba0 000a 	sub.w	r0, r0, sl
 8005ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	4303      	orrs	r3, r0
 8006002:	3401      	adds	r4, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600a:	4826      	ldr	r0, [pc, #152]	; (80060a4 <_svfiprintf_r+0x1f0>)
 800600c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006010:	2206      	movs	r2, #6
 8006012:	f7fa f8e5 	bl	80001e0 <memchr>
 8006016:	2800      	cmp	r0, #0
 8006018:	d038      	beq.n	800608c <_svfiprintf_r+0x1d8>
 800601a:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <_svfiprintf_r+0x1f4>)
 800601c:	bb1b      	cbnz	r3, 8006066 <_svfiprintf_r+0x1b2>
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	3307      	adds	r3, #7
 8006022:	f023 0307 	bic.w	r3, r3, #7
 8006026:	3308      	adds	r3, #8
 8006028:	9303      	str	r3, [sp, #12]
 800602a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602c:	4433      	add	r3, r6
 800602e:	9309      	str	r3, [sp, #36]	; 0x24
 8006030:	e767      	b.n	8005f02 <_svfiprintf_r+0x4e>
 8006032:	fb0c 3202 	mla	r2, ip, r2, r3
 8006036:	460c      	mov	r4, r1
 8006038:	2001      	movs	r0, #1
 800603a:	e7a5      	b.n	8005f88 <_svfiprintf_r+0xd4>
 800603c:	2300      	movs	r3, #0
 800603e:	3401      	adds	r4, #1
 8006040:	9305      	str	r3, [sp, #20]
 8006042:	4619      	mov	r1, r3
 8006044:	f04f 0c0a 	mov.w	ip, #10
 8006048:	4620      	mov	r0, r4
 800604a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800604e:	3a30      	subs	r2, #48	; 0x30
 8006050:	2a09      	cmp	r2, #9
 8006052:	d903      	bls.n	800605c <_svfiprintf_r+0x1a8>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0c5      	beq.n	8005fe4 <_svfiprintf_r+0x130>
 8006058:	9105      	str	r1, [sp, #20]
 800605a:	e7c3      	b.n	8005fe4 <_svfiprintf_r+0x130>
 800605c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006060:	4604      	mov	r4, r0
 8006062:	2301      	movs	r3, #1
 8006064:	e7f0      	b.n	8006048 <_svfiprintf_r+0x194>
 8006066:	ab03      	add	r3, sp, #12
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	462a      	mov	r2, r5
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <_svfiprintf_r+0x1f8>)
 800606e:	a904      	add	r1, sp, #16
 8006070:	4638      	mov	r0, r7
 8006072:	f3af 8000 	nop.w
 8006076:	1c42      	adds	r2, r0, #1
 8006078:	4606      	mov	r6, r0
 800607a:	d1d6      	bne.n	800602a <_svfiprintf_r+0x176>
 800607c:	89ab      	ldrh	r3, [r5, #12]
 800607e:	065b      	lsls	r3, r3, #25
 8006080:	f53f af2c 	bmi.w	8005edc <_svfiprintf_r+0x28>
 8006084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006086:	b01d      	add	sp, #116	; 0x74
 8006088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	462a      	mov	r2, r5
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <_svfiprintf_r+0x1f8>)
 8006094:	a904      	add	r1, sp, #16
 8006096:	4638      	mov	r0, r7
 8006098:	f000 f87a 	bl	8006190 <_printf_i>
 800609c:	e7eb      	b.n	8006076 <_svfiprintf_r+0x1c2>
 800609e:	bf00      	nop
 80060a0:	08006805 	.word	0x08006805
 80060a4:	0800680f 	.word	0x0800680f
 80060a8:	00000000 	.word	0x00000000
 80060ac:	08005dfd 	.word	0x08005dfd
 80060b0:	0800680b 	.word	0x0800680b

080060b4 <_printf_common>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	4616      	mov	r6, r2
 80060ba:	4699      	mov	r9, r3
 80060bc:	688a      	ldr	r2, [r1, #8]
 80060be:	690b      	ldr	r3, [r1, #16]
 80060c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bfb8      	it	lt
 80060c8:	4613      	movlt	r3, r2
 80060ca:	6033      	str	r3, [r6, #0]
 80060cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060d0:	4607      	mov	r7, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	b10a      	cbz	r2, 80060da <_printf_common+0x26>
 80060d6:	3301      	adds	r3, #1
 80060d8:	6033      	str	r3, [r6, #0]
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	0699      	lsls	r1, r3, #26
 80060de:	bf42      	ittt	mi
 80060e0:	6833      	ldrmi	r3, [r6, #0]
 80060e2:	3302      	addmi	r3, #2
 80060e4:	6033      	strmi	r3, [r6, #0]
 80060e6:	6825      	ldr	r5, [r4, #0]
 80060e8:	f015 0506 	ands.w	r5, r5, #6
 80060ec:	d106      	bne.n	80060fc <_printf_common+0x48>
 80060ee:	f104 0a19 	add.w	sl, r4, #25
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	6832      	ldr	r2, [r6, #0]
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	42ab      	cmp	r3, r5
 80060fa:	dc26      	bgt.n	800614a <_printf_common+0x96>
 80060fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006100:	1e13      	subs	r3, r2, #0
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	bf18      	it	ne
 8006106:	2301      	movne	r3, #1
 8006108:	0692      	lsls	r2, r2, #26
 800610a:	d42b      	bmi.n	8006164 <_printf_common+0xb0>
 800610c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006110:	4649      	mov	r1, r9
 8006112:	4638      	mov	r0, r7
 8006114:	47c0      	blx	r8
 8006116:	3001      	adds	r0, #1
 8006118:	d01e      	beq.n	8006158 <_printf_common+0xa4>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	68e5      	ldr	r5, [r4, #12]
 800611e:	6832      	ldr	r2, [r6, #0]
 8006120:	f003 0306 	and.w	r3, r3, #6
 8006124:	2b04      	cmp	r3, #4
 8006126:	bf08      	it	eq
 8006128:	1aad      	subeq	r5, r5, r2
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	bf0c      	ite	eq
 8006130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006134:	2500      	movne	r5, #0
 8006136:	4293      	cmp	r3, r2
 8006138:	bfc4      	itt	gt
 800613a:	1a9b      	subgt	r3, r3, r2
 800613c:	18ed      	addgt	r5, r5, r3
 800613e:	2600      	movs	r6, #0
 8006140:	341a      	adds	r4, #26
 8006142:	42b5      	cmp	r5, r6
 8006144:	d11a      	bne.n	800617c <_printf_common+0xc8>
 8006146:	2000      	movs	r0, #0
 8006148:	e008      	b.n	800615c <_printf_common+0xa8>
 800614a:	2301      	movs	r3, #1
 800614c:	4652      	mov	r2, sl
 800614e:	4649      	mov	r1, r9
 8006150:	4638      	mov	r0, r7
 8006152:	47c0      	blx	r8
 8006154:	3001      	adds	r0, #1
 8006156:	d103      	bne.n	8006160 <_printf_common+0xac>
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006160:	3501      	adds	r5, #1
 8006162:	e7c6      	b.n	80060f2 <_printf_common+0x3e>
 8006164:	18e1      	adds	r1, r4, r3
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	2030      	movs	r0, #48	; 0x30
 800616a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800616e:	4422      	add	r2, r4
 8006170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006178:	3302      	adds	r3, #2
 800617a:	e7c7      	b.n	800610c <_printf_common+0x58>
 800617c:	2301      	movs	r3, #1
 800617e:	4622      	mov	r2, r4
 8006180:	4649      	mov	r1, r9
 8006182:	4638      	mov	r0, r7
 8006184:	47c0      	blx	r8
 8006186:	3001      	adds	r0, #1
 8006188:	d0e6      	beq.n	8006158 <_printf_common+0xa4>
 800618a:	3601      	adds	r6, #1
 800618c:	e7d9      	b.n	8006142 <_printf_common+0x8e>
	...

08006190 <_printf_i>:
 8006190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	7e0f      	ldrb	r7, [r1, #24]
 8006196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006198:	2f78      	cmp	r7, #120	; 0x78
 800619a:	4691      	mov	r9, r2
 800619c:	4680      	mov	r8, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	469a      	mov	sl, r3
 80061a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061a6:	d807      	bhi.n	80061b8 <_printf_i+0x28>
 80061a8:	2f62      	cmp	r7, #98	; 0x62
 80061aa:	d80a      	bhi.n	80061c2 <_printf_i+0x32>
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	f000 80d8 	beq.w	8006362 <_printf_i+0x1d2>
 80061b2:	2f58      	cmp	r7, #88	; 0x58
 80061b4:	f000 80a3 	beq.w	80062fe <_printf_i+0x16e>
 80061b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061c0:	e03a      	b.n	8006238 <_printf_i+0xa8>
 80061c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061c6:	2b15      	cmp	r3, #21
 80061c8:	d8f6      	bhi.n	80061b8 <_printf_i+0x28>
 80061ca:	a101      	add	r1, pc, #4	; (adr r1, 80061d0 <_printf_i+0x40>)
 80061cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d0:	08006229 	.word	0x08006229
 80061d4:	0800623d 	.word	0x0800623d
 80061d8:	080061b9 	.word	0x080061b9
 80061dc:	080061b9 	.word	0x080061b9
 80061e0:	080061b9 	.word	0x080061b9
 80061e4:	080061b9 	.word	0x080061b9
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	080061b9 	.word	0x080061b9
 80061f0:	080061b9 	.word	0x080061b9
 80061f4:	080061b9 	.word	0x080061b9
 80061f8:	080061b9 	.word	0x080061b9
 80061fc:	08006349 	.word	0x08006349
 8006200:	0800626d 	.word	0x0800626d
 8006204:	0800632b 	.word	0x0800632b
 8006208:	080061b9 	.word	0x080061b9
 800620c:	080061b9 	.word	0x080061b9
 8006210:	0800636b 	.word	0x0800636b
 8006214:	080061b9 	.word	0x080061b9
 8006218:	0800626d 	.word	0x0800626d
 800621c:	080061b9 	.word	0x080061b9
 8006220:	080061b9 	.word	0x080061b9
 8006224:	08006333 	.word	0x08006333
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	602a      	str	r2, [r5, #0]
 8006230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006238:	2301      	movs	r3, #1
 800623a:	e0a3      	b.n	8006384 <_printf_i+0x1f4>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	6829      	ldr	r1, [r5, #0]
 8006240:	0606      	lsls	r6, r0, #24
 8006242:	f101 0304 	add.w	r3, r1, #4
 8006246:	d50a      	bpl.n	800625e <_printf_i+0xce>
 8006248:	680e      	ldr	r6, [r1, #0]
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	2e00      	cmp	r6, #0
 800624e:	da03      	bge.n	8006258 <_printf_i+0xc8>
 8006250:	232d      	movs	r3, #45	; 0x2d
 8006252:	4276      	negs	r6, r6
 8006254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006258:	485e      	ldr	r0, [pc, #376]	; (80063d4 <_printf_i+0x244>)
 800625a:	230a      	movs	r3, #10
 800625c:	e019      	b.n	8006292 <_printf_i+0x102>
 800625e:	680e      	ldr	r6, [r1, #0]
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006266:	bf18      	it	ne
 8006268:	b236      	sxthne	r6, r6
 800626a:	e7ef      	b.n	800624c <_printf_i+0xbc>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	1d19      	adds	r1, r3, #4
 8006272:	6029      	str	r1, [r5, #0]
 8006274:	0601      	lsls	r1, r0, #24
 8006276:	d501      	bpl.n	800627c <_printf_i+0xec>
 8006278:	681e      	ldr	r6, [r3, #0]
 800627a:	e002      	b.n	8006282 <_printf_i+0xf2>
 800627c:	0646      	lsls	r6, r0, #25
 800627e:	d5fb      	bpl.n	8006278 <_printf_i+0xe8>
 8006280:	881e      	ldrh	r6, [r3, #0]
 8006282:	4854      	ldr	r0, [pc, #336]	; (80063d4 <_printf_i+0x244>)
 8006284:	2f6f      	cmp	r7, #111	; 0x6f
 8006286:	bf0c      	ite	eq
 8006288:	2308      	moveq	r3, #8
 800628a:	230a      	movne	r3, #10
 800628c:	2100      	movs	r1, #0
 800628e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006292:	6865      	ldr	r5, [r4, #4]
 8006294:	60a5      	str	r5, [r4, #8]
 8006296:	2d00      	cmp	r5, #0
 8006298:	bfa2      	ittt	ge
 800629a:	6821      	ldrge	r1, [r4, #0]
 800629c:	f021 0104 	bicge.w	r1, r1, #4
 80062a0:	6021      	strge	r1, [r4, #0]
 80062a2:	b90e      	cbnz	r6, 80062a8 <_printf_i+0x118>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	d04d      	beq.n	8006344 <_printf_i+0x1b4>
 80062a8:	4615      	mov	r5, r2
 80062aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ae:	fb03 6711 	mls	r7, r3, r1, r6
 80062b2:	5dc7      	ldrb	r7, [r0, r7]
 80062b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062b8:	4637      	mov	r7, r6
 80062ba:	42bb      	cmp	r3, r7
 80062bc:	460e      	mov	r6, r1
 80062be:	d9f4      	bls.n	80062aa <_printf_i+0x11a>
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d10b      	bne.n	80062dc <_printf_i+0x14c>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	07de      	lsls	r6, r3, #31
 80062c8:	d508      	bpl.n	80062dc <_printf_i+0x14c>
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	6861      	ldr	r1, [r4, #4]
 80062ce:	4299      	cmp	r1, r3
 80062d0:	bfde      	ittt	le
 80062d2:	2330      	movle	r3, #48	; 0x30
 80062d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062dc:	1b52      	subs	r2, r2, r5
 80062de:	6122      	str	r2, [r4, #16]
 80062e0:	f8cd a000 	str.w	sl, [sp]
 80062e4:	464b      	mov	r3, r9
 80062e6:	aa03      	add	r2, sp, #12
 80062e8:	4621      	mov	r1, r4
 80062ea:	4640      	mov	r0, r8
 80062ec:	f7ff fee2 	bl	80060b4 <_printf_common>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d14c      	bne.n	800638e <_printf_i+0x1fe>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	b004      	add	sp, #16
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	4835      	ldr	r0, [pc, #212]	; (80063d4 <_printf_i+0x244>)
 8006300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006304:	6829      	ldr	r1, [r5, #0]
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f851 6b04 	ldr.w	r6, [r1], #4
 800630c:	6029      	str	r1, [r5, #0]
 800630e:	061d      	lsls	r5, r3, #24
 8006310:	d514      	bpl.n	800633c <_printf_i+0x1ac>
 8006312:	07df      	lsls	r7, r3, #31
 8006314:	bf44      	itt	mi
 8006316:	f043 0320 	orrmi.w	r3, r3, #32
 800631a:	6023      	strmi	r3, [r4, #0]
 800631c:	b91e      	cbnz	r6, 8006326 <_printf_i+0x196>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f023 0320 	bic.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	2310      	movs	r3, #16
 8006328:	e7b0      	b.n	800628c <_printf_i+0xfc>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	f043 0320 	orr.w	r3, r3, #32
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	2378      	movs	r3, #120	; 0x78
 8006334:	4828      	ldr	r0, [pc, #160]	; (80063d8 <_printf_i+0x248>)
 8006336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800633a:	e7e3      	b.n	8006304 <_printf_i+0x174>
 800633c:	0659      	lsls	r1, r3, #25
 800633e:	bf48      	it	mi
 8006340:	b2b6      	uxthmi	r6, r6
 8006342:	e7e6      	b.n	8006312 <_printf_i+0x182>
 8006344:	4615      	mov	r5, r2
 8006346:	e7bb      	b.n	80062c0 <_printf_i+0x130>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	6826      	ldr	r6, [r4, #0]
 800634c:	6961      	ldr	r1, [r4, #20]
 800634e:	1d18      	adds	r0, r3, #4
 8006350:	6028      	str	r0, [r5, #0]
 8006352:	0635      	lsls	r5, r6, #24
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	d501      	bpl.n	800635c <_printf_i+0x1cc>
 8006358:	6019      	str	r1, [r3, #0]
 800635a:	e002      	b.n	8006362 <_printf_i+0x1d2>
 800635c:	0670      	lsls	r0, r6, #25
 800635e:	d5fb      	bpl.n	8006358 <_printf_i+0x1c8>
 8006360:	8019      	strh	r1, [r3, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	4615      	mov	r5, r2
 8006368:	e7ba      	b.n	80062e0 <_printf_i+0x150>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	1d1a      	adds	r2, r3, #4
 800636e:	602a      	str	r2, [r5, #0]
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	2100      	movs	r1, #0
 8006376:	4628      	mov	r0, r5
 8006378:	f7f9 ff32 	bl	80001e0 <memchr>
 800637c:	b108      	cbz	r0, 8006382 <_printf_i+0x1f2>
 800637e:	1b40      	subs	r0, r0, r5
 8006380:	6060      	str	r0, [r4, #4]
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	2300      	movs	r3, #0
 8006388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638c:	e7a8      	b.n	80062e0 <_printf_i+0x150>
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	462a      	mov	r2, r5
 8006392:	4649      	mov	r1, r9
 8006394:	4640      	mov	r0, r8
 8006396:	47d0      	blx	sl
 8006398:	3001      	adds	r0, #1
 800639a:	d0ab      	beq.n	80062f4 <_printf_i+0x164>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	079b      	lsls	r3, r3, #30
 80063a0:	d413      	bmi.n	80063ca <_printf_i+0x23a>
 80063a2:	68e0      	ldr	r0, [r4, #12]
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	4298      	cmp	r0, r3
 80063a8:	bfb8      	it	lt
 80063aa:	4618      	movlt	r0, r3
 80063ac:	e7a4      	b.n	80062f8 <_printf_i+0x168>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4632      	mov	r2, r6
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	47d0      	blx	sl
 80063b8:	3001      	adds	r0, #1
 80063ba:	d09b      	beq.n	80062f4 <_printf_i+0x164>
 80063bc:	3501      	adds	r5, #1
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	9903      	ldr	r1, [sp, #12]
 80063c2:	1a5b      	subs	r3, r3, r1
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dcf2      	bgt.n	80063ae <_printf_i+0x21e>
 80063c8:	e7eb      	b.n	80063a2 <_printf_i+0x212>
 80063ca:	2500      	movs	r5, #0
 80063cc:	f104 0619 	add.w	r6, r4, #25
 80063d0:	e7f5      	b.n	80063be <_printf_i+0x22e>
 80063d2:	bf00      	nop
 80063d4:	08006816 	.word	0x08006816
 80063d8:	08006827 	.word	0x08006827

080063dc <memcpy>:
 80063dc:	440a      	add	r2, r1
 80063de:	4291      	cmp	r1, r2
 80063e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e4:	d100      	bne.n	80063e8 <memcpy+0xc>
 80063e6:	4770      	bx	lr
 80063e8:	b510      	push	{r4, lr}
 80063ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f2:	4291      	cmp	r1, r2
 80063f4:	d1f9      	bne.n	80063ea <memcpy+0xe>
 80063f6:	bd10      	pop	{r4, pc}

080063f8 <memmove>:
 80063f8:	4288      	cmp	r0, r1
 80063fa:	b510      	push	{r4, lr}
 80063fc:	eb01 0402 	add.w	r4, r1, r2
 8006400:	d902      	bls.n	8006408 <memmove+0x10>
 8006402:	4284      	cmp	r4, r0
 8006404:	4623      	mov	r3, r4
 8006406:	d807      	bhi.n	8006418 <memmove+0x20>
 8006408:	1e43      	subs	r3, r0, #1
 800640a:	42a1      	cmp	r1, r4
 800640c:	d008      	beq.n	8006420 <memmove+0x28>
 800640e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006416:	e7f8      	b.n	800640a <memmove+0x12>
 8006418:	4402      	add	r2, r0
 800641a:	4601      	mov	r1, r0
 800641c:	428a      	cmp	r2, r1
 800641e:	d100      	bne.n	8006422 <memmove+0x2a>
 8006420:	bd10      	pop	{r4, pc}
 8006422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800642a:	e7f7      	b.n	800641c <memmove+0x24>

0800642c <_free_r>:
 800642c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800642e:	2900      	cmp	r1, #0
 8006430:	d044      	beq.n	80064bc <_free_r+0x90>
 8006432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006436:	9001      	str	r0, [sp, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f1a1 0404 	sub.w	r4, r1, #4
 800643e:	bfb8      	it	lt
 8006440:	18e4      	addlt	r4, r4, r3
 8006442:	f000 f913 	bl	800666c <__malloc_lock>
 8006446:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <_free_r+0x94>)
 8006448:	9801      	ldr	r0, [sp, #4]
 800644a:	6813      	ldr	r3, [r2, #0]
 800644c:	b933      	cbnz	r3, 800645c <_free_r+0x30>
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	6014      	str	r4, [r2, #0]
 8006452:	b003      	add	sp, #12
 8006454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006458:	f000 b90e 	b.w	8006678 <__malloc_unlock>
 800645c:	42a3      	cmp	r3, r4
 800645e:	d908      	bls.n	8006472 <_free_r+0x46>
 8006460:	6825      	ldr	r5, [r4, #0]
 8006462:	1961      	adds	r1, r4, r5
 8006464:	428b      	cmp	r3, r1
 8006466:	bf01      	itttt	eq
 8006468:	6819      	ldreq	r1, [r3, #0]
 800646a:	685b      	ldreq	r3, [r3, #4]
 800646c:	1949      	addeq	r1, r1, r5
 800646e:	6021      	streq	r1, [r4, #0]
 8006470:	e7ed      	b.n	800644e <_free_r+0x22>
 8006472:	461a      	mov	r2, r3
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	b10b      	cbz	r3, 800647c <_free_r+0x50>
 8006478:	42a3      	cmp	r3, r4
 800647a:	d9fa      	bls.n	8006472 <_free_r+0x46>
 800647c:	6811      	ldr	r1, [r2, #0]
 800647e:	1855      	adds	r5, r2, r1
 8006480:	42a5      	cmp	r5, r4
 8006482:	d10b      	bne.n	800649c <_free_r+0x70>
 8006484:	6824      	ldr	r4, [r4, #0]
 8006486:	4421      	add	r1, r4
 8006488:	1854      	adds	r4, r2, r1
 800648a:	42a3      	cmp	r3, r4
 800648c:	6011      	str	r1, [r2, #0]
 800648e:	d1e0      	bne.n	8006452 <_free_r+0x26>
 8006490:	681c      	ldr	r4, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	6053      	str	r3, [r2, #4]
 8006496:	4421      	add	r1, r4
 8006498:	6011      	str	r1, [r2, #0]
 800649a:	e7da      	b.n	8006452 <_free_r+0x26>
 800649c:	d902      	bls.n	80064a4 <_free_r+0x78>
 800649e:	230c      	movs	r3, #12
 80064a0:	6003      	str	r3, [r0, #0]
 80064a2:	e7d6      	b.n	8006452 <_free_r+0x26>
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf04      	itt	eq
 80064ac:	6819      	ldreq	r1, [r3, #0]
 80064ae:	685b      	ldreq	r3, [r3, #4]
 80064b0:	6063      	str	r3, [r4, #4]
 80064b2:	bf04      	itt	eq
 80064b4:	1949      	addeq	r1, r1, r5
 80064b6:	6021      	streq	r1, [r4, #0]
 80064b8:	6054      	str	r4, [r2, #4]
 80064ba:	e7ca      	b.n	8006452 <_free_r+0x26>
 80064bc:	b003      	add	sp, #12
 80064be:	bd30      	pop	{r4, r5, pc}
 80064c0:	200002b8 	.word	0x200002b8

080064c4 <sbrk_aligned>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4e0e      	ldr	r6, [pc, #56]	; (8006500 <sbrk_aligned+0x3c>)
 80064c8:	460c      	mov	r4, r1
 80064ca:	6831      	ldr	r1, [r6, #0]
 80064cc:	4605      	mov	r5, r0
 80064ce:	b911      	cbnz	r1, 80064d6 <sbrk_aligned+0x12>
 80064d0:	f000 f8bc 	bl	800664c <_sbrk_r>
 80064d4:	6030      	str	r0, [r6, #0]
 80064d6:	4621      	mov	r1, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 f8b7 	bl	800664c <_sbrk_r>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	d00a      	beq.n	80064f8 <sbrk_aligned+0x34>
 80064e2:	1cc4      	adds	r4, r0, #3
 80064e4:	f024 0403 	bic.w	r4, r4, #3
 80064e8:	42a0      	cmp	r0, r4
 80064ea:	d007      	beq.n	80064fc <sbrk_aligned+0x38>
 80064ec:	1a21      	subs	r1, r4, r0
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f8ac 	bl	800664c <_sbrk_r>
 80064f4:	3001      	adds	r0, #1
 80064f6:	d101      	bne.n	80064fc <sbrk_aligned+0x38>
 80064f8:	f04f 34ff 	mov.w	r4, #4294967295
 80064fc:	4620      	mov	r0, r4
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	200002bc 	.word	0x200002bc

08006504 <_malloc_r>:
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	1ccd      	adds	r5, r1, #3
 800650a:	f025 0503 	bic.w	r5, r5, #3
 800650e:	3508      	adds	r5, #8
 8006510:	2d0c      	cmp	r5, #12
 8006512:	bf38      	it	cc
 8006514:	250c      	movcc	r5, #12
 8006516:	2d00      	cmp	r5, #0
 8006518:	4607      	mov	r7, r0
 800651a:	db01      	blt.n	8006520 <_malloc_r+0x1c>
 800651c:	42a9      	cmp	r1, r5
 800651e:	d905      	bls.n	800652c <_malloc_r+0x28>
 8006520:	230c      	movs	r3, #12
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	2600      	movs	r6, #0
 8006526:	4630      	mov	r0, r6
 8006528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652c:	4e2e      	ldr	r6, [pc, #184]	; (80065e8 <_malloc_r+0xe4>)
 800652e:	f000 f89d 	bl	800666c <__malloc_lock>
 8006532:	6833      	ldr	r3, [r6, #0]
 8006534:	461c      	mov	r4, r3
 8006536:	bb34      	cbnz	r4, 8006586 <_malloc_r+0x82>
 8006538:	4629      	mov	r1, r5
 800653a:	4638      	mov	r0, r7
 800653c:	f7ff ffc2 	bl	80064c4 <sbrk_aligned>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	4604      	mov	r4, r0
 8006544:	d14d      	bne.n	80065e2 <_malloc_r+0xde>
 8006546:	6834      	ldr	r4, [r6, #0]
 8006548:	4626      	mov	r6, r4
 800654a:	2e00      	cmp	r6, #0
 800654c:	d140      	bne.n	80065d0 <_malloc_r+0xcc>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	4631      	mov	r1, r6
 8006552:	4638      	mov	r0, r7
 8006554:	eb04 0803 	add.w	r8, r4, r3
 8006558:	f000 f878 	bl	800664c <_sbrk_r>
 800655c:	4580      	cmp	r8, r0
 800655e:	d13a      	bne.n	80065d6 <_malloc_r+0xd2>
 8006560:	6821      	ldr	r1, [r4, #0]
 8006562:	3503      	adds	r5, #3
 8006564:	1a6d      	subs	r5, r5, r1
 8006566:	f025 0503 	bic.w	r5, r5, #3
 800656a:	3508      	adds	r5, #8
 800656c:	2d0c      	cmp	r5, #12
 800656e:	bf38      	it	cc
 8006570:	250c      	movcc	r5, #12
 8006572:	4629      	mov	r1, r5
 8006574:	4638      	mov	r0, r7
 8006576:	f7ff ffa5 	bl	80064c4 <sbrk_aligned>
 800657a:	3001      	adds	r0, #1
 800657c:	d02b      	beq.n	80065d6 <_malloc_r+0xd2>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	442b      	add	r3, r5
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	e00e      	b.n	80065a4 <_malloc_r+0xa0>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	1b52      	subs	r2, r2, r5
 800658a:	d41e      	bmi.n	80065ca <_malloc_r+0xc6>
 800658c:	2a0b      	cmp	r2, #11
 800658e:	d916      	bls.n	80065be <_malloc_r+0xba>
 8006590:	1961      	adds	r1, r4, r5
 8006592:	42a3      	cmp	r3, r4
 8006594:	6025      	str	r5, [r4, #0]
 8006596:	bf18      	it	ne
 8006598:	6059      	strne	r1, [r3, #4]
 800659a:	6863      	ldr	r3, [r4, #4]
 800659c:	bf08      	it	eq
 800659e:	6031      	streq	r1, [r6, #0]
 80065a0:	5162      	str	r2, [r4, r5]
 80065a2:	604b      	str	r3, [r1, #4]
 80065a4:	4638      	mov	r0, r7
 80065a6:	f104 060b 	add.w	r6, r4, #11
 80065aa:	f000 f865 	bl	8006678 <__malloc_unlock>
 80065ae:	f026 0607 	bic.w	r6, r6, #7
 80065b2:	1d23      	adds	r3, r4, #4
 80065b4:	1af2      	subs	r2, r6, r3
 80065b6:	d0b6      	beq.n	8006526 <_malloc_r+0x22>
 80065b8:	1b9b      	subs	r3, r3, r6
 80065ba:	50a3      	str	r3, [r4, r2]
 80065bc:	e7b3      	b.n	8006526 <_malloc_r+0x22>
 80065be:	6862      	ldr	r2, [r4, #4]
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	bf0c      	ite	eq
 80065c4:	6032      	streq	r2, [r6, #0]
 80065c6:	605a      	strne	r2, [r3, #4]
 80065c8:	e7ec      	b.n	80065a4 <_malloc_r+0xa0>
 80065ca:	4623      	mov	r3, r4
 80065cc:	6864      	ldr	r4, [r4, #4]
 80065ce:	e7b2      	b.n	8006536 <_malloc_r+0x32>
 80065d0:	4634      	mov	r4, r6
 80065d2:	6876      	ldr	r6, [r6, #4]
 80065d4:	e7b9      	b.n	800654a <_malloc_r+0x46>
 80065d6:	230c      	movs	r3, #12
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4638      	mov	r0, r7
 80065dc:	f000 f84c 	bl	8006678 <__malloc_unlock>
 80065e0:	e7a1      	b.n	8006526 <_malloc_r+0x22>
 80065e2:	6025      	str	r5, [r4, #0]
 80065e4:	e7de      	b.n	80065a4 <_malloc_r+0xa0>
 80065e6:	bf00      	nop
 80065e8:	200002b8 	.word	0x200002b8

080065ec <_realloc_r>:
 80065ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f0:	4680      	mov	r8, r0
 80065f2:	4614      	mov	r4, r2
 80065f4:	460e      	mov	r6, r1
 80065f6:	b921      	cbnz	r1, 8006602 <_realloc_r+0x16>
 80065f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065fc:	4611      	mov	r1, r2
 80065fe:	f7ff bf81 	b.w	8006504 <_malloc_r>
 8006602:	b92a      	cbnz	r2, 8006610 <_realloc_r+0x24>
 8006604:	f7ff ff12 	bl	800642c <_free_r>
 8006608:	4625      	mov	r5, r4
 800660a:	4628      	mov	r0, r5
 800660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006610:	f000 f838 	bl	8006684 <_malloc_usable_size_r>
 8006614:	4284      	cmp	r4, r0
 8006616:	4607      	mov	r7, r0
 8006618:	d802      	bhi.n	8006620 <_realloc_r+0x34>
 800661a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800661e:	d812      	bhi.n	8006646 <_realloc_r+0x5a>
 8006620:	4621      	mov	r1, r4
 8006622:	4640      	mov	r0, r8
 8006624:	f7ff ff6e 	bl	8006504 <_malloc_r>
 8006628:	4605      	mov	r5, r0
 800662a:	2800      	cmp	r0, #0
 800662c:	d0ed      	beq.n	800660a <_realloc_r+0x1e>
 800662e:	42bc      	cmp	r4, r7
 8006630:	4622      	mov	r2, r4
 8006632:	4631      	mov	r1, r6
 8006634:	bf28      	it	cs
 8006636:	463a      	movcs	r2, r7
 8006638:	f7ff fed0 	bl	80063dc <memcpy>
 800663c:	4631      	mov	r1, r6
 800663e:	4640      	mov	r0, r8
 8006640:	f7ff fef4 	bl	800642c <_free_r>
 8006644:	e7e1      	b.n	800660a <_realloc_r+0x1e>
 8006646:	4635      	mov	r5, r6
 8006648:	e7df      	b.n	800660a <_realloc_r+0x1e>
	...

0800664c <_sbrk_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d06      	ldr	r5, [pc, #24]	; (8006668 <_sbrk_r+0x1c>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fc faf6 	bl	8002c48 <_sbrk>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_sbrk_r+0x1a>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_sbrk_r+0x1a>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200002c0 	.word	0x200002c0

0800666c <__malloc_lock>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__malloc_lock+0x8>)
 800666e:	f000 b811 	b.w	8006694 <__retarget_lock_acquire_recursive>
 8006672:	bf00      	nop
 8006674:	200002c4 	.word	0x200002c4

08006678 <__malloc_unlock>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__malloc_unlock+0x8>)
 800667a:	f000 b80c 	b.w	8006696 <__retarget_lock_release_recursive>
 800667e:	bf00      	nop
 8006680:	200002c4 	.word	0x200002c4

08006684 <_malloc_usable_size_r>:
 8006684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006688:	1f18      	subs	r0, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	bfbc      	itt	lt
 800668e:	580b      	ldrlt	r3, [r1, r0]
 8006690:	18c0      	addlt	r0, r0, r3
 8006692:	4770      	bx	lr

08006694 <__retarget_lock_acquire_recursive>:
 8006694:	4770      	bx	lr

08006696 <__retarget_lock_release_recursive>:
 8006696:	4770      	bx	lr

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr
